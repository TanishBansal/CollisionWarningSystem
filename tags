!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	monodepth/darknet/src/activations.h	/^}ACTIVATION;$/;"	t	typeref:enum:__anon28
ACTIVATIONS_H	monodepth/darknet/src/activations.h	2;"	d
ACTIVATION_LAYER_H	monodepth/darknet/src/activation_layer.h	2;"	d
ACTIVE	monodepth/darknet/src/layer.h	/^    ACTIVE,$/;"	e	enum:__anon36
ADDRPOINTER	monodepth/darknet/src/http_stream.cpp	16;"	d	file:
ADDRPOINTER	monodepth/darknet/src/http_stream.cpp	35;"	d	file:
AI2	monodepth/darknet/src/convolutional_layer.c	20;"	d	file:
APPNAMESO	monodepth/darknet/Makefile	/^APPNAMESO=uselib$/;"	m
ARCH	monodepth/darknet/Makefile	/^ARCH= -gencode arch=compute_30,code=sm_30 \\$/;"	m
AVGPOOL	monodepth/darknet/src/layer.h	/^    AVGPOOL,$/;"	e	enum:__anon36
AVGPOOL_LAYER_H	monodepth/darknet/src/avgpool_layer.h	2;"	d
AVX	monodepth/darknet/Makefile	/^AVX=0$/;"	m
AVXFlag	monodepth/darknet/src/gemm.c	77;"	d	file:
Application	sshgui.py	/^class Application(tk.Frame):$/;"	c
B1	monodepth/darknet/src/layer.h	/^	float B1;$/;"	m	struct:__anon38
B1	monodepth/darknet/src/layer.h	/^    float B1;$/;"	m	struct:layer
B1	monodepth/darknet/src/network.h	/^    float B1;$/;"	m	struct:network
B2	monodepth/darknet/src/layer.h	/^	float B2;$/;"	m	struct:__anon38
B2	monodepth/darknet/src/layer.h	/^    float B2;$/;"	m	struct:layer
B2	monodepth/darknet/src/network.h	/^    float B2;$/;"	m	struct:network
BASE_LAYER_H	monodepth/darknet/src/layer.h	2;"	d
BATCHNORM	monodepth/darknet/src/layer.h	/^    BATCHNORM,$/;"	e	enum:__anon36
BATCHNORM_LAYER_H	monodepth/darknet/src/batchnorm_layer.h	2;"	d
BLANK	monodepth/darknet/src/layer.h	/^    BLANK$/;"	e	enum:__anon36
BLAS_H	monodepth/darknet/src/blas.h	2;"	d
BLOCK	monodepth/darknet/src/cuda.h	26;"	d
BOX	monodepth/darknet/darknet.py	/^class BOX(Structure):$/;"	c
BOX_H	monodepth/darknet/src/box.h	2;"	d
BattleRoyaleWithCheese	monodepth/darknet/src/compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
CAPTCHA_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
CC	monodepth/darknet/Makefile	/^CC=gcc$/;"	m
CFLAGS	monodepth/darknet/Makefile	/^CFLAGS=-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas$/;"	m
CLASSIFICATION_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
CLASS_LIST	monodepth/darknet/scripts/get_openimages_dataset.py	/^CLASS_LIST = ('\/m\/01g317','\/m\/04yx4')$/;"	v
CLMULFlag	monodepth/darknet/src/gemm.c	79;"	d	file:
COL2IM_H	monodepth/darknet/src/col2im.h	2;"	d
COMMON	monodepth/darknet/Makefile	/^COMMON= $/;"	m
COMPARE_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
CONNECTED	monodepth/darknet/src/layer.h	/^    CONNECTED,$/;"	e	enum:__anon36
CONNECTED_LAYER_H	monodepth/darknet/src/connected_layer.h	2;"	d
CONSTANT	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
CONVOLUTIONAL	monodepth/darknet/src/layer.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon36
CONVOLUTIONAL_LAYER_H	monodepth/darknet/src/convolutional_layer.h	2;"	d
COST	monodepth/darknet/src/layer.h	/^    COST,$/;"	e	enum:__anon36
COST_LAYER_H	monodepth/darknet/src/cost_layer.h	2;"	d
COST_TYPE	monodepth/darknet/src/layer.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon37
CPP	monodepth/darknet/Makefile	/^CPP=g++$/;"	m
CRNN	monodepth/darknet/src/layer.h	/^    CRNN,$/;"	e	enum:__anon36
CRNN_LAYER_H	monodepth/darknet/src/crnn_layer.h	3;"	d
CROP	monodepth/darknet/src/layer.h	/^    CROP,$/;"	e	enum:__anon36
CROP_LAYER_H	monodepth/darknet/src/crop_layer.h	2;"	d
CUDA_H	monodepth/darknet/src/cuda.h	2;"	d
CUDNN	monodepth/darknet/Makefile	/^CUDNN=1$/;"	m
CUDNN_HALF	monodepth/darknet/Makefile	/^CUDNN_HALF=1$/;"	m
C_SHARP_MAX_OBJECTS	monodepth/darknet/src/yolo_v2_class.hpp	31;"	d
DATA_H	monodepth/darknet/src/data.h	2;"	d
DEBUG	monodepth/darknet/Makefile	/^DEBUG=0$/;"	m
DECONVOLUTIONAL	monodepth/darknet/src/layer.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon36
DECONVOLUTIONAL_LAYER_H	monodepth/darknet/src/deconvolutional_layer.h	2;"	d
DELTA_EPOCH_IN_MICROSECS	monodepth/darknet/src/gettimeofday.h	6;"	d
DELTA_EPOCH_IN_MICROSECS	monodepth/darknet/src/gettimeofday.h	8;"	d
DEMO	monodepth/darknet/src/demo.h	2;"	d
DEPS	monodepth/darknet/Makefile	/^DEPS = $(wildcard src\/*.h) Makefile$/;"	m
DETECTION	monodepth/darknet/darknet.py	/^class DETECTION(Structure):$/;"	c
DETECTION	monodepth/darknet/src/layer.h	/^    DETECTION,$/;"	e	enum:__anon36
DETECTION_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
DETECTION_LAYER_H	monodepth/darknet/src/detection_layer.h	2;"	d
DET_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
DOABS	monodepth/darknet/src/region_layer.c	12;"	d	file:
DROPOUT	monodepth/darknet/src/layer.h	/^    DROPOUT,$/;"	e	enum:__anon36
DROPOUT_LAYER_H	monodepth/darknet/src/dropout_layer.h	2;"	d
DWORD	monodepth/darknet/3rdparty/include/pthread.h	1360;"	d
DWORD	monodepth/darknet/3rdparty/include/pthread.h	312;"	d
DWORD_PTR	monodepth/darknet/3rdparty/include/pthread.h	/^typedef unsigned long DWORD_PTR;$/;"	t
Detector	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API Detector::Detector(std::string cfg_filename, std::string weight_filename, int gpu_id) : cur_gpu_id(gpu_id)$/;"	f	class:Detector
Detector	monodepth/darknet/src/yolo_v2_class.hpp	/^class Detector {$/;"	c
EDEADLK	monodepth/darknet/3rdparty/include/pthread.h	285;"	d
EDEADLK	monodepth/darknet/3rdparty/include/pthread.h	287;"	d
ELIDE_CODE	monodepth/darknet/src/getopt.c	56;"	d	file:
ELU	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
ENOSYS	monodepth/darknet/3rdparty/include/pthread.h	280;"	d
ENOTRECOVERABLE	monodepth/darknet/3rdparty/include/pthread.h	296;"	d
ENOTSUP	monodepth/darknet/3rdparty/include/pthread.h	272;"	d
EOWNERDEAD	monodepth/darknet/3rdparty/include/pthread.h	293;"	d
ETIMEDOUT	monodepth/darknet/3rdparty/include/pthread.h	276;"	d
EXEC	monodepth/darknet/Makefile	/^EXEC=darknet$/;"	m
EXP	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
FAST_BITS	monodepth/darknet/src/stb_image.h	1639;"	d
FMAFlag	monodepth/darknet/src/gemm.c	78;"	d	file:
FRAMES	monodepth/darknet/src/demo.c	18;"	d	file:
FRAMES	monodepth/darknet/src/yolo_v2_class.cpp	23;"	d	file:
F_OK	monodepth/darknet/src/unistd.h	23;"	d
GEMM_H	monodepth/darknet/src/gemm.h	2;"	d
GETOPT_INTERFACE_VERSION	monodepth/darknet/src/getopt.c	52;"	d	file:
GPU	monodepth/darknet/Makefile	/^GPU=1$/;"	m
GPU	monodepth/darknet/src/yolo_console_dll.cpp	14;"	d	file:
GRU	monodepth/darknet/src/layer.h	/^    GRU,$/;"	e	enum:__anon36
GRU_LAYER_H	monodepth/darknet/src/gru_layer.h	3;"	d
HANDLE	monodepth/darknet/3rdparty/include/pthread.h	1357;"	d
HANDLE	monodepth/darknet/3rdparty/include/pthread.h	308;"	d
HARDTAN	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
HAVE_MODE_T	monodepth/darknet/3rdparty/include/pthread.h	250;"	d
HAVE_MODE_T	monodepth/darknet/3rdparty/include/pthread.h	252;"	d
HAVE_MODE_T	monodepth/darknet/3rdparty/include/sched.h	101;"	d
HAVE_MODE_T	monodepth/darknet/3rdparty/include/sched.h	103;"	d
HAVE_MODE_T	monodepth/darknet/3rdparty/include/semaphore.h	100;"	d
HAVE_MODE_T	monodepth/darknet/3rdparty/include/semaphore.h	102;"	d
HAVE_PTW32_CONFIG_H	monodepth/darknet/3rdparty/include/pthread.h	115;"	d
HAVE_SIGNAL_H	monodepth/darknet/3rdparty/include/pthread.h	114;"	d
HAVE_STRUCT_TIMESPEC	monodepth/darknet/3rdparty/include/pthread.h	113;"	d
HAVE_STRUCT_TIMESPEC	monodepth/darknet/3rdparty/include/pthread.h	249;"	d
HAVE_STRUCT_TIMESPEC	monodepth/darknet/3rdparty/include/pthread.h	317;"	d
HAVE_STRUCT_TIMESPEC	monodepth/darknet/3rdparty/include/sched.h	100;"	d
HAVE_STRUCT_TIMESPEC	monodepth/darknet/3rdparty/include/semaphore.h	99;"	d
HOSTENT	monodepth/darknet/src/http_stream.cpp	32;"	d	file:
HTTP_STREAM_H	monodepth/darknet/src/http_stream.h	3;"	d
IM2COL_H	monodepth/darknet/src/im2col.h	2;"	d
IMAGE	monodepth/darknet/darknet.py	/^class IMAGE(Structure):$/;"	c
IMAGE_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
IMAGE_H	monodepth/darknet/src/image.h	2;"	d
INCLUDE_STB_IMAGE_WRITE_H	monodepth/darknet/src/stb_image_write.h	125;"	d
INVALID_SOCKET	monodepth/darknet/src/http_stream.cpp	36;"	d	file:
IOU	monodepth/darknet/scripts/gen_anchors.py	/^def IOU(x,centroids):$/;"	f
ImageLabel	sshgui.py	/^class ImageLabel(tk.Label):$/;"	c
Infer	sshgui.py	/^    def Infer(self):$/;"	m	class:Application
LAYER_TYPE	monodepth/darknet/src/layer.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon36
LDFLAGS	monodepth/darknet/Makefile	/^LDFLAGS= -lm -pthread $/;"	m
LEAKY	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
LETTERBOX_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
LHTAN	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
LIBNAMESO	monodepth/darknet/Makefile	/^LIBNAMESO=darknet.so$/;"	m
LIBSO	monodepth/darknet/Makefile	/^LIBSO=1$/;"	m
LINEAR	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
LIST_H	monodepth/darknet/src/list.h	2;"	d
LOCAL	monodepth/darknet/src/layer.h	/^    LOCAL,$/;"	e	enum:__anon36
LOCAL_LAYER_H	monodepth/darknet/src/local_layer.h	2;"	d
LOGGY	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
LOGISTIC	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
MASKED	monodepth/darknet/src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon37
MATRIX_H	monodepth/darknet/src/matrix.h	2;"	d
MAXPOOL	monodepth/darknet/src/layer.h	/^    MAXPOOL,$/;"	e	enum:__anon36
MAXPOOL_LAYER_H	monodepth/darknet/src/maxpool_layer.h	2;"	d
METADATA	monodepth/darknet/darknet.py	/^class METADATA(Structure):$/;"	c
MJPGWriter	monodepth/darknet/src/http_stream.cpp	/^	MJPGWriter(int port = 0, int _timeout = 200000, int _quality = 30)$/;"	f	class:MJPGWriter
MJPGWriter	monodepth/darknet/src/http_stream.cpp	/^class MJPGWriter$/;"	c	file:
MonodepthDataloader	monodepth/monodepth_dataloader.py	/^class MonodepthDataloader(object):$/;"	c
MonodepthModel	monodepth/monodepth_model.py	/^class MonodepthModel(object):$/;"	c
NEED_ERRNO	monodepth/darknet/3rdparty/include/pthread.h	245;"	d
NEED_ERRNO	monodepth/darknet/3rdparty/include/sched.h	96;"	d
NEED_ERRNO	monodepth/darknet/3rdparty/include/semaphore.h	95;"	d
NEED_SEM	monodepth/darknet/3rdparty/include/pthread.h	246;"	d
NEED_SEM	monodepth/darknet/3rdparty/include/sched.h	97;"	d
NEED_SEM	monodepth/darknet/3rdparty/include/semaphore.h	96;"	d
NETWORK	monodepth/darknet/src/layer.h	/^    NETWORK,$/;"	e	enum:__anon36
NETWORK_H	monodepth/darknet/src/network.h	3;"	d
NONOPTION_P	monodepth/darknet/src/getopt.c	539;"	d	file:
NORMALIZATION	monodepth/darknet/src/layer.h	/^    NORMALIZATION,$/;"	e	enum:__anon36
NORMALIZATION_LAYER_H	monodepth/darknet/src/normalization_layer.h	2;"	d
NUMCHARS	monodepth/darknet/src/data.c	375;"	d	file:
NVCC	monodepth/darknet/Makefile	/^NVCC=nvcc $/;"	m
OBJ	monodepth/darknet/Makefile	/^OBJ=http_stream.o gemm.o utils.o cuda.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o darknet.o detection_layer.o captcha.o route_layer.o writing.o box.o nightmare.o normalization_layer.o avgpool_layer.o coco.o dice.o yolo.o detector.o layer.o compare.o classifier.o local_layer.o swag.o shortcut_layer.o activation_layer.o rnn_layer.o gru_layer.o rnn.o rnn_vid.o crnn_layer.o demo.o tag.o cifar.o go.o batchnorm_layer.o art.o region_layer.o reorg_layer.o reorg_old_layer.o super.o voxel.o tree.o yolo_layer.o upsample_layer.o$/;"	m
OBJDIR	monodepth/darknet/Makefile	/^OBJDIR=.\/obj\/$/;"	m
OBJS	monodepth/darknet/Makefile	/^OBJS = $(addprefix $(OBJDIR), $(OBJ))$/;"	m
OLD_CLASSIFICATION_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
OPENCV	monodepth/darknet/Makefile	/^OPENCV=1$/;"	m
OPENCV	monodepth/darknet/src/yolo_console_dll.cpp	13;"	d	file:
OPENCV_VERSION	monodepth/darknet/src/detector.c	19;"	d	file:
OPENCV_VERSION	monodepth/darknet/src/detector.c	22;"	d	file:
OPENCV_VERSION	monodepth/darknet/src/yolo_console_dll.cpp	31;"	d	file:
OPENCV_VERSION	monodepth/darknet/src/yolo_console_dll.cpp	41;"	d	file:
OPENMP	monodepth/darknet/Makefile	/^OPENMP=0$/;"	m
OPTION_LIST_H	monodepth/darknet/src/option_list.h	2;"	d
OPTS	monodepth/darknet/Makefile	/^OPTS= -O0 -g$/;"	m
OPTS	monodepth/darknet/Makefile	/^OPTS=-Ofast$/;"	m
OS	monodepth/darknet/Makefile	/^OS := $(shell uname)$/;"	m
OSXSAVEFlag	monodepth/darknet/src/gemm.c	76;"	d	file:
Output	sshgui.py	/^    def Output(self):$/;"	m	class:Application
PARSER_H	monodepth/darknet/src/parser.h	2;"	d
PERMUTE	monodepth/darknet/src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon30	file:
PLSE	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
POLY	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
PORT	monodepth/darknet/src/http_stream.cpp	15;"	d	file:
PORT	monodepth/darknet/src/http_stream.cpp	30;"	d	file:
PTHREAD_BARRIER_SERIAL_THREAD	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_BARRIER_SERIAL_THREAD = -1$/;"	e	enum:__anon3
PTHREAD_CANCELED	monodepth/darknet/3rdparty/include/pthread.h	665;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS   = 0,$/;"	e	enum:__anon3
PTHREAD_CANCEL_DEFERRED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED       = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_CANCEL_DISABLE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE        = 1,$/;"	e	enum:__anon3
PTHREAD_CANCEL_ENABLE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE         = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_COND_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	703;"	d
PTHREAD_CREATE_DETACHED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CREATE_DETACHED       = 1,$/;"	e	enum:__anon3
PTHREAD_CREATE_JOINABLE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE       = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_DESTRUCTOR_ITERATIONS	monodepth/darknet/3rdparty/include/pthread.h	507;"	d
PTHREAD_DESTRUCTOR_ITERATIONS	monodepth/darknet/3rdparty/include/pthread.h	508;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	695;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	monodepth/darknet/3rdparty/include/pthread.h	701;"	d
PTHREAD_EXPLICIT_SCHED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED        = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_H	monodepth/darknet/3rdparty/include/pthread.h	34;"	d
PTHREAD_INHERIT_SCHED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_INHERIT_SCHED         = 0,$/;"	e	enum:__anon3
PTHREAD_KEYS_MAX	monodepth/darknet/3rdparty/include/pthread.h	513;"	d
PTHREAD_KEYS_MAX	monodepth/darknet/3rdparty/include/pthread.h	514;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_DEFAULT	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon4
PTHREAD_MUTEX_ERRORCHECK	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_ERRORCHECK_NP	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_FAST_NP	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	693;"	d
PTHREAD_MUTEX_NORMAL	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_RECURSIVE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_RECURSIVE_NP	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_ROBUST	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST          = 1,$/;"	e	enum:__anon3
PTHREAD_MUTEX_STALLED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_STALLED         = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_MUTEX_TIMED_NP	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_ONCE_INIT	monodepth/darknet/3rdparty/include/pthread.h	675;"	d
PTHREAD_PROCESS_PRIVATE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE       = 0,$/;"	e	enum:__anon3
PTHREAD_PROCESS_SHARED	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_PROCESS_SHARED        = 1,$/;"	e	enum:__anon3
PTHREAD_RECURSIVE_MUTEX_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	694;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	monodepth/darknet/3rdparty/include/pthread.h	700;"	d
PTHREAD_RWLOCK_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	705;"	d
PTHREAD_SCOPE_PROCESS	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS         = 0,$/;"	e	enum:__anon3
PTHREAD_SCOPE_SYSTEM	monodepth/darknet/3rdparty/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM          = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_SPINLOCK_INITIALIZER	monodepth/darknet/3rdparty/include/pthread.h	707;"	d
PTHREAD_STACK_MIN	monodepth/darknet/3rdparty/include/pthread.h	516;"	d
PTHREAD_STACK_MIN	monodepth/darknet/3rdparty/include/pthread.h	517;"	d
PTHREAD_THREADS_MAX	monodepth/darknet/3rdparty/include/pthread.h	523;"	d
PTHREAD_THREADS_MAX	monodepth/darknet/3rdparty/include/pthread.h	524;"	d
PTW32_ALERTABLE_ASYNC_CANCEL	monodepth/darknet/3rdparty/include/pthread.h	/^  PTW32_ALERTABLE_ASYNC_CANCEL              = 0x0002  \/* Can cancel blocked threads. *\/$/;"	e	enum:ptw32_features
PTW32_CDECL	monodepth/darknet/3rdparty/include/pthread.h	570;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/pthread.h	552;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/pthread.h	554;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/pthread.h	557;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/sched.h	81;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/sched.h	83;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/sched.h	86;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/semaphore.h	80;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/semaphore.h	82;"	d
PTW32_DLLPORT	monodepth/darknet/3rdparty/include/semaphore.h	85;"	d
PTW32_FALSE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTW32_FALSE = 0,$/;"	e	enum:__anon1
PTW32_INCLUDE_WINDOWS_H	monodepth/darknet/3rdparty/include/pthread.h	194;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	100;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	101;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	108;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	1363;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	86;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	89;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	94;"	d
PTW32_LEVEL	monodepth/darknet/3rdparty/include/pthread.h	95;"	d
PTW32_LEVEL_MAX	monodepth/darknet/3rdparty/include/pthread.h	105;"	d
PTW32_LEVEL_MAX	monodepth/darknet/3rdparty/include/pthread.h	1364;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	179;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	42;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	45;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	50;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	51;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	56;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	57;"	d
PTW32_SCHED_LEVEL	monodepth/darknet/3rdparty/include/sched.h	64;"	d
PTW32_SCHED_LEVEL_MAX	monodepth/darknet/3rdparty/include/sched.h	180;"	d
PTW32_SCHED_LEVEL_MAX	monodepth/darknet/3rdparty/include/sched.h	61;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	166;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	42;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	45;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	50;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	51;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	56;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	57;"	d
PTW32_SEMAPHORE_LEVEL	monodepth/darknet/3rdparty/include/semaphore.h	64;"	d
PTW32_SEMAPHORE_LEVEL_MAX	monodepth/darknet/3rdparty/include/semaphore.h	167;"	d
PTW32_SEMAPHORE_LEVEL_MAX	monodepth/darknet/3rdparty/include/semaphore.h	61;"	d
PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE = 0x0001, \/* System provides it. *\/$/;"	e	enum:ptw32_features
PTW32_TRUE	monodepth/darknet/3rdparty/include/pthread.h	/^  PTW32_TRUE = (! PTW32_FALSE)$/;"	e	enum:__anon1
PTW32_VERSION	monodepth/darknet/3rdparty/include/pthread.h	40;"	d
PTW32_VERSION_STRING	monodepth/darknet/3rdparty/include/pthread.h	41;"	d
PTW32__DWORD_DEF	monodepth/darknet/3rdparty/include/pthread.h	311;"	d
PTW32__HANDLE_DEF	monodepth/darknet/3rdparty/include/pthread.h	307;"	d
PThreadCleanup	monodepth/darknet/3rdparty/include/pthread.h	/^          PThreadCleanup($/;"	f	class:PThreadCleanup
PThreadCleanup	monodepth/darknet/3rdparty/include/pthread.h	/^          PThreadCleanup() :$/;"	f	class:PThreadCleanup
PThreadCleanup	monodepth/darknet/3rdparty/include/pthread.h	/^        class PThreadCleanup {$/;"	c
PtW32CatchAll	monodepth/darknet/3rdparty/include/pthread.h	1336;"	d
RAMP	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
RANDOM	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
REGION	monodepth/darknet/src/layer.h	/^    REGION,$/;"	e	enum:__anon36
REGION_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
REGION_LAYER_H	monodepth/darknet/src/region_layer.h	2;"	d
RELIE	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
RELU	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
REORG	monodepth/darknet/src/layer.h	/^    REORG,$/;"	e	enum:__anon36
REORG_LAYER_H	monodepth/darknet/src/reorg_layer.h	2;"	d
REORG_OLD	monodepth/darknet/src/layer.h	/^	REORG_OLD,$/;"	e	enum:__anon36
REORG_OLD_LAYER_H	monodepth/darknet/src/reorg_old_layer.h	2;"	d
REQUIRE_ORDER	monodepth/darknet/src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon30	file:
RETURN_IN_ORDER	monodepth/darknet/src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon30	file:
RNN	monodepth/darknet/src/layer.h	/^    RNN,$/;"	e	enum:__anon36
RNN_LAYER_H	monodepth/darknet/src/rnn_layer.h	3;"	d
ROUTE	monodepth/darknet/src/layer.h	/^    ROUTE,$/;"	e	enum:__anon36
ROUTE_LAYER_H	monodepth/darknet/src/route_layer.h	2;"	d
R_OK	monodepth/darknet/src/unistd.h	20;"	d
SCHED_FIFO	monodepth/darknet/3rdparty/include/sched.h	/^  SCHED_FIFO,$/;"	e	enum:__anon5
SCHED_MAX	monodepth/darknet/3rdparty/include/sched.h	/^  SCHED_MAX   = SCHED_RR$/;"	e	enum:__anon5
SCHED_MIN	monodepth/darknet/3rdparty/include/sched.h	/^  SCHED_MIN   = SCHED_OTHER,$/;"	e	enum:__anon5
SCHED_OTHER	monodepth/darknet/3rdparty/include/sched.h	/^  SCHED_OTHER = 0,$/;"	e	enum:__anon5
SCHED_RR	monodepth/darknet/3rdparty/include/sched.h	/^  SCHED_RR,$/;"	e	enum:__anon5
SECRET_NUM	monodepth/darknet/src/utils.h	11;"	d
SEMAPHORE_H	monodepth/darknet/3rdparty/include/semaphore.h	40;"	d
SEM_NSEMS_MAX	monodepth/darknet/3rdparty/include/pthread.h	530;"	d
SEM_NSEMS_MAX	monodepth/darknet/3rdparty/include/pthread.h	531;"	d
SEM_VALUE_MAX	monodepth/darknet/3rdparty/include/pthread.h	536;"	d
SEM_VALUE_MAX	monodepth/darknet/3rdparty/include/pthread.h	537;"	d
SHORTCUT	monodepth/darknet/src/layer.h	/^    SHORTCUT,$/;"	e	enum:__anon36
SHORTCUT_LAYER_H	monodepth/darknet/src/shortcut_layer.h	2;"	d
SIG	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
SIG_BLOCK	monodepth/darknet/3rdparty/include/pthread.h	328;"	d
SIG_SETMASK	monodepth/darknet/3rdparty/include/pthread.h	336;"	d
SIG_UNBLOCK	monodepth/darknet/3rdparty/include/pthread.h	332;"	d
SMOOTH	monodepth/darknet/src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon37
SOCKADDR	monodepth/darknet/src/http_stream.cpp	33;"	d	file:
SOCKADDR_IN	monodepth/darknet/src/http_stream.cpp	34;"	d	file:
SOCKET	monodepth/darknet/src/http_stream.cpp	31;"	d	file:
SOCKET_ERROR	monodepth/darknet/src/http_stream.cpp	37;"	d	file:
SOFTMAX	monodepth/darknet/src/layer.h	/^    SOFTMAX,$/;"	e	enum:__anon36
SOFTMAX_LAYER_H	monodepth/darknet/src/softmax_layer.h	2;"	d
SSE	monodepth/darknet/src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon37
SSIM	monodepth/monodepth_model.py	/^    def SSIM(self, x, y):$/;"	m	class:MonodepthModel
STAIR	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
STBIDEF	monodepth/darknet/src/stb_image.h	328;"	d
STBIDEF	monodepth/darknet/src/stb_image.h	330;"	d
STBIWDEF	monodepth/darknet/src/stb_image_write.h	132;"	d
STBIWDEF	monodepth/darknet/src/stb_image_write.h	134;"	d
STBIW_ASSERT	monodepth/darknet/src/stb_image_write.h	206;"	d
STBIW_FREE	monodepth/darknet/src/stb_image_write.h	191;"	d
STBIW_MALLOC	monodepth/darknet/src/stb_image_write.h	189;"	d
STBIW_MEMMOVE	monodepth/darknet/src/stb_image_write.h	200;"	d
STBIW_REALLOC	monodepth/darknet/src/stb_image_write.h	190;"	d
STBIW_REALLOC_SIZED	monodepth/darknet/src/stb_image_write.h	195;"	d
STBIW_UCHAR	monodepth/darknet/src/stb_image_write.h	209;"	d
STBI_ASSERT	monodepth/darknet/src/stb_image.h	516;"	d
STBI_FREE	monodepth/darknet/src/stb_image.h	574;"	d
STBI_HAS_LROTL	monodepth/darknet/src/stb_image.h	554;"	d
STBI_INCLUDE_STB_IMAGE_H	monodepth/darknet/src/stb_image.h	103;"	d
STBI_MALLOC	monodepth/darknet/src/stb_image.h	572;"	d
STBI_NEON	monodepth/darknet/src/stb_image.h	663;"	d
STBI_NOTUSED	monodepth/darknet/src/stb_image.h	548;"	d
STBI_NOTUSED	monodepth/darknet/src/stb_image.h	550;"	d
STBI_NO_BMP	monodepth/darknet/src/stb_image.h	473;"	d
STBI_NO_GIF	monodepth/darknet/src/stb_image.h	482;"	d
STBI_NO_HDR	monodepth/darknet/src/stb_image.h	485;"	d
STBI_NO_JPEG	monodepth/darknet/src/stb_image.h	467;"	d
STBI_NO_PIC	monodepth/darknet/src/stb_image.h	488;"	d
STBI_NO_PNG	monodepth/darknet/src/stb_image.h	470;"	d
STBI_NO_PNM	monodepth/darknet/src/stb_image.h	491;"	d
STBI_NO_PSD	monodepth/darknet/src/stb_image.h	476;"	d
STBI_NO_SIMD	monodepth/darknet/src/stb_image.h	596;"	d
STBI_NO_SIMD	monodepth/darknet/src/stb_image.h	611;"	d
STBI_NO_TGA	monodepth/darknet/src/stb_image.h	479;"	d
STBI_NO_ZLIB	monodepth/darknet/src/stb_image.h	496;"	d
STBI_ORDER_BGR	monodepth/darknet/src/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon10
STBI_ORDER_RGB	monodepth/darknet/src/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon10
STBI_REALLOC	monodepth/darknet/src/stb_image.h	573;"	d
STBI_REALLOC_SIZED	monodepth/darknet/src/stb_image.h	578;"	d
STBI_SIMD_ALIGN	monodepth/darknet/src/stb_image.h	641;"	d
STBI_SIMD_ALIGN	monodepth/darknet/src/stb_image.h	649;"	d
STBI_SIMD_ALIGN	monodepth/darknet/src/stb_image.h	669;"	d
STBI_SIMD_ALIGN	monodepth/darknet/src/stb_image.h	673;"	d
STBI_SSE2	monodepth/darknet/src/stb_image.h	615;"	d
STBI_VERSION	monodepth/darknet/src/stb_image.h	308;"	d
STBI__BYTECAST	monodepth/darknet/src/stb_image.h	1452;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	1490;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	1508;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	1539;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	1557;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	4360;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	4373;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	4377;"	d
STBI__CASE	monodepth/darknet/src/stb_image.h	4390;"	d
STBI__COMBO	monodepth/darknet/src/stb_image.h	1489;"	d
STBI__COMBO	monodepth/darknet/src/stb_image.h	1538;"	d
STBI__F_avg	monodepth/darknet/src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon21
STBI__F_avg_first	monodepth/darknet/src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon21
STBI__F_none	monodepth/darknet/src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon21
STBI__F_paeth	monodepth/darknet/src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon21
STBI__F_paeth_first	monodepth/darknet/src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon21
STBI__F_sub	monodepth/darknet/src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon21
STBI__F_up	monodepth/darknet/src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon21
STBI__HDR_BUFLEN	monodepth/darknet/src/stb_image.h	6426;"	d
STBI__IDCT_1D	monodepth/darknet/src/stb_image.h	2118;"	d
STBI__MARKER_none	monodepth/darknet/src/stb_image.h	2603;"	d
STBI__PNG_TYPE	monodepth/darknet/src/stb_image.h	4678;"	d
STBI__RESTART	monodepth/darknet/src/stb_image.h	2620;"	d
STBI__SCAN_header	monodepth/darknet/src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon12
STBI__SCAN_load	monodepth/darknet/src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon12
STBI__SCAN_type	monodepth/darknet/src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon12
STBI__X64_TARGET	monodepth/darknet/src/stb_image.h	583;"	d
STBI__X86_TARGET	monodepth/darknet/src/stb_image.h	585;"	d
STBI__ZFAST_BITS	monodepth/darknet/src/stb_image.h	3740;"	d
STBI__ZFAST_MASK	monodepth/darknet/src/stb_image.h	3741;"	d
STBI_default	monodepth/darknet/src/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon7
STBI_grey	monodepth/darknet/src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon7
STBI_grey_alpha	monodepth/darknet/src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon7
STBI_rgb	monodepth/darknet/src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon7
STBI_rgb_alpha	monodepth/darknet/src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon7
STB_IMAGE_IMPLEMENTATION	monodepth/darknet/src/image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	monodepth/darknet/src/image.c	10;"	d	file:
STDERR_FILENO	monodepth/darknet/src/unistd.h	41;"	d
STDIN_FILENO	monodepth/darknet/src/unistd.h	39;"	d
STDOUT_FILENO	monodepth/darknet/src/unistd.h	40;"	d
STEP	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
STEPS	monodepth/darknet/src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon51
STUDY_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
SUPER_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
SWAG_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
SWAP_FLAGS	monodepth/darknet/src/getopt.c	274;"	d	file:
SWAP_FLAGS	monodepth/darknet/src/getopt.c	282;"	d	file:
SWAP_FLAGS	monodepth/darknet/src/getopt.c	285;"	d	file:
SelectImage	sshgui.py	/^    def SelectImage(self):$/;"	m	class:Application
SortMaster3000	monodepth/darknet/src/compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
TAG_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
TANH	monodepth/darknet/src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon28
TREE_H	monodepth/darknet/src/tree.h	2;"	d
TWO_PI	monodepth/darknet/src/utils.h	12;"	d
Tracker_optflow	monodepth/darknet/src/yolo_v2_class.hpp	/^	Tracker_optflow(int _gpu_id = 0, int win_size = 9, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	monodepth/darknet/src/yolo_v2_class.hpp	/^	Tracker_optflow(int win_size = 9, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	monodepth/darknet/src/yolo_v2_class.hpp	/^class Tracker_optflow {$/;"	c
Tracker_optflow	monodepth/darknet/src/yolo_v2_class.hpp	/^class Tracker_optflow {};$/;"	c
ULONG_PTR	monodepth/darknet/3rdparty/include/pthread.h	/^typedef unsigned long ULONG_PTR;$/;"	t
UPSAMPLE	monodepth/darknet/src/layer.h	/^	UPSAMPLE,$/;"	e	enum:__anon36
UPSAMPLE_LAYER_H	monodepth/darknet/src/upsample_layer.h	2;"	d
USET	monodepth/darknet/src/rnn_layer.h	8;"	d
UTILS_H	monodepth/darknet/src/utils.h	2;"	d
VAESFlag	monodepth/darknet/src/gemm.c	80;"	d	file:
VPATH	monodepth/darknet/Makefile	/^VPATH=.\/src\/$/;"	m
WCSS	monodepth/darknet/scripts/kmeansiou.c	/^double WCSS(matrix data, int *assignments, matrix centers)$/;"	f
WRITING_DATA	monodepth/darknet/src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon42
W_OK	monodepth/darknet/src/unistd.h	21;"	d
X	monodepth/darknet/src/data.h	/^    matrix X;$/;"	m	struct:__anon41
XNOR	monodepth/darknet/src/layer.h	/^    XNOR,$/;"	e	enum:__anon36
YCbCr_to_RGB_kernel	monodepth/darknet/src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon14
YOLO	monodepth/darknet/src/layer.h	/^	YOLO,$/;"	e	enum:__anon36
YOLODLL_API	monodepth/darknet/src/box.h	12;"	d
YOLODLL_API	monodepth/darknet/src/box.h	14;"	d
YOLODLL_API	monodepth/darknet/src/box.h	6;"	d
YOLODLL_API	monodepth/darknet/src/box.h	8;"	d
YOLODLL_API	monodepth/darknet/src/cuda.h	10;"	d
YOLODLL_API	monodepth/darknet/src/cuda.h	12;"	d
YOLODLL_API	monodepth/darknet/src/cuda.h	16;"	d
YOLODLL_API	monodepth/darknet/src/cuda.h	18;"	d
YOLODLL_API	monodepth/darknet/src/option_list.h	13;"	d
YOLODLL_API	monodepth/darknet/src/option_list.h	15;"	d
YOLODLL_API	monodepth/darknet/src/option_list.h	7;"	d
YOLODLL_API	monodepth/darknet/src/option_list.h	9;"	d
YOLODLL_API	monodepth/darknet/src/utils.h	16;"	d
YOLODLL_API	monodepth/darknet/src/utils.h	18;"	d
YOLODLL_API	monodepth/darknet/src/utils.h	22;"	d
YOLODLL_API	monodepth/darknet/src/utils.h	24;"	d
YOLODLL_API	monodepth/darknet/src/yolo_v2_class.hpp	10;"	d
YOLODLL_API	monodepth/darknet/src/yolo_v2_class.hpp	12;"	d
YOLODLL_API	monodepth/darknet/src/yolo_v2_class.hpp	4;"	d
YOLODLL_API	monodepth/darknet/src/yolo_v2_class.hpp	6;"	d
YOLO_LAYER_H	monodepth/darknet/src/yolo_layer.h	2;"	d
_	monodepth/darknet/src/getopt.c	84;"	d	file:
_	monodepth/darknet/src/getopt.c	87;"	d	file:
_CRT_NONSTDC_NO_DEPRECATE	monodepth/darknet/src/stb_image_write.h	167;"	d
_CRT_SECURE_NO_WARNINGS	monodepth/darknet/src/stb_image_write.h	164;"	d
_GETOPT_H	monodepth/darknet/src/getopt.h	23;"	d
_INIT_W32DATA	monodepth/darknet/src/http_stream.cpp	/^	_INIT_W32DATA() { WSAStartup(MAKEWORD(2, 1), &w); }$/;"	f	struct:_INIT_W32DATA
_INIT_W32DATA	monodepth/darknet/src/http_stream.cpp	/^struct _INIT_W32DATA$/;"	s	file:
_NO_PROTO	monodepth/darknet/src/getopt.c	27;"	d	file:
_POSIX_BARRIERS	monodepth/darknet/3rdparty/include/pthread.h	443;"	d
_POSIX_BARRIERS	monodepth/darknet/3rdparty/include/pthread.h	444;"	d
_POSIX_READER_WRITER_LOCKS	monodepth/darknet/3rdparty/include/pthread.h	437;"	d
_POSIX_READER_WRITER_LOCKS	monodepth/darknet/3rdparty/include/pthread.h	438;"	d
_POSIX_SEMAPHORES	monodepth/darknet/3rdparty/include/semaphore.h	118;"	d
_POSIX_SEM_NSEMS_MAX	monodepth/darknet/3rdparty/include/pthread.h	526;"	d
_POSIX_SEM_NSEMS_MAX	monodepth/darknet/3rdparty/include/pthread.h	527;"	d
_POSIX_SEM_VALUE_MAX	monodepth/darknet/3rdparty/include/pthread.h	533;"	d
_POSIX_SEM_VALUE_MAX	monodepth/darknet/3rdparty/include/pthread.h	534;"	d
_POSIX_SPIN_LOCKS	monodepth/darknet/3rdparty/include/pthread.h	440;"	d
_POSIX_SPIN_LOCKS	monodepth/darknet/3rdparty/include/pthread.h	441;"	d
_POSIX_THREADS	monodepth/darknet/3rdparty/include/pthread.h	434;"	d
_POSIX_THREADS	monodepth/darknet/3rdparty/include/pthread.h	435;"	d
_POSIX_THREAD_ATTR_STACKADDR	monodepth/darknet/3rdparty/include/pthread.h	455;"	d
_POSIX_THREAD_ATTR_STACKADDR	monodepth/darknet/3rdparty/include/pthread.h	456;"	d
_POSIX_THREAD_ATTR_STACKSIZE	monodepth/darknet/3rdparty/include/pthread.h	449;"	d
_POSIX_THREAD_ATTR_STACKSIZE	monodepth/darknet/3rdparty/include/pthread.h	450;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	monodepth/darknet/3rdparty/include/pthread.h	504;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	monodepth/darknet/3rdparty/include/pthread.h	505;"	d
_POSIX_THREAD_KEYS_MAX	monodepth/darknet/3rdparty/include/pthread.h	510;"	d
_POSIX_THREAD_KEYS_MAX	monodepth/darknet/3rdparty/include/pthread.h	511;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	monodepth/darknet/3rdparty/include/pthread.h	465;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	monodepth/darknet/3rdparty/include/pthread.h	466;"	d
_POSIX_THREAD_PRIO_INHERIT	monodepth/darknet/3rdparty/include/pthread.h	458;"	d
_POSIX_THREAD_PRIO_INHERIT	monodepth/darknet/3rdparty/include/pthread.h	459;"	d
_POSIX_THREAD_PRIO_PROTECT	monodepth/darknet/3rdparty/include/pthread.h	461;"	d
_POSIX_THREAD_PRIO_PROTECT	monodepth/darknet/3rdparty/include/pthread.h	462;"	d
_POSIX_THREAD_PROCESS_SHARED	monodepth/darknet/3rdparty/include/pthread.h	468;"	d
_POSIX_THREAD_PROCESS_SHARED	monodepth/darknet/3rdparty/include/pthread.h	469;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	monodepth/darknet/3rdparty/include/pthread.h	446;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	monodepth/darknet/3rdparty/include/pthread.h	447;"	d
_POSIX_THREAD_THREADS_MAX	monodepth/darknet/3rdparty/include/pthread.h	519;"	d
_POSIX_THREAD_THREADS_MAX	monodepth/darknet/3rdparty/include/pthread.h	520;"	d
_SCHED_H	monodepth/darknet/3rdparty/include/sched.h	40;"	d
_TIMESPEC_DEFINED	monodepth/darknet/3rdparty/include/pthread.h	319;"	d
_UNISTD_H	monodepth/darknet/src/unistd.h	2;"	d
__CLEANUP_C	monodepth/darknet/3rdparty/include/pthread.h	74;"	d
__except	monodepth/darknet/3rdparty/include/pthread.h	1297;"	d
__getopt_initialized	monodepth/darknet/src/getopt.c	/^int __getopt_initialized;$/;"	v
__init__	monodepth/monodepth_dataloader.py	/^    def __init__(self, data_path, filenames_file, params, dataset, mode):$/;"	m	class:MonodepthDataloader
__init__	monodepth/monodepth_model.py	/^    def __init__(self, params, mode, left, right, reuse_variables=None, model_index=0):$/;"	m	class:MonodepthModel
__init__	sshgui.py	/^    def __init__(self, master=None):$/;"	m	class:Application
_fields_	monodepth/darknet/darknet.py	/^    _fields_ = [("bbox", BOX),$/;"	v	class:DETECTION
_fields_	monodepth/darknet/darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	monodepth/darknet/darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
_fields_	monodepth/darknet/darknet.py	/^    _fields_ = [("x", c_float),$/;"	v	class:BOX
_ftime	monodepth/darknet/3rdparty/include/pthread.h	1264;"	d
_getopt_initialize	monodepth/darknet/src/getopt.c	/^_getopt_initialize (argc, argv, optstring)$/;"	f	file:
_getopt_internal	monodepth/darknet/src/getopt.c	/^_getopt_internal (argc, argv, optstring, longopts, longind, long_only)$/;"	f
_init_once	monodepth/darknet/src/http_stream.cpp	/^} _init_once;$/;"	v	typeref:struct:_INIT_W32DATA
_interpolate	monodepth/bilinear_sampler.py	/^    def _interpolate(im, x, y):$/;"	f	function:bilinear_sampler_1d_h
_repeat	monodepth/bilinear_sampler.py	/^    def _repeat(x, n_repeats):$/;"	f	function:bilinear_sampler_1d_h
_timeb	monodepth/darknet/3rdparty/include/pthread.h	1265;"	d
_transform	monodepth/bilinear_sampler.py	/^    def _transform(input_images, x_offset):$/;"	f	function:bilinear_sampler_1d_h
_write	monodepth/darknet/src/http_stream.cpp	/^	int _write(int sock, char const*const s, int len)$/;"	f	class:MJPGWriter	file:
a	monodepth/darknet/depth.py	/^        a=int(yy[c][1])$/;"	v
a	monodepth/darknet/single_depth.py	/^    a=int(yy[c][1])$/;"	v
a	monodepth/r.py	/^a = open("output.txt", "w")$/;"	v
a1	monodepth/utils/evaluate_kitti.py	/^    a1      = np.zeros(num_samples, np.float32)$/;"	v
a2	monodepth/utils/evaluate_kitti.py	/^    a2      = np.zeros(num_samples, np.float32)$/;"	v
a3	monodepth/utils/evaluate_kitti.py	/^    a3      = np.zeros(num_samples, np.float32)$/;"	v
abs_mean	monodepth/darknet/src/nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
abs_rel	monodepth/utils/evaluate_kitti.py	/^    abs_rel = np.zeros(num_samples, np.float32)$/;"	v
absolute	monodepth/darknet/src/layer.h	/^    int absolute;$/;"	m	struct:layer
access	monodepth/darknet/src/unistd.h	25;"	d
activate	monodepth/darknet/src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	monodepth/darknet/src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activation	monodepth/darknet/src/layer.h	/^    ACTIVATION activation;$/;"	m	struct:layer
adam	monodepth/darknet/src/layer.h	/^	int adam;$/;"	m	struct:__anon38
adam	monodepth/darknet/src/layer.h	/^    int adam;$/;"	m	struct:layer
adam	monodepth/darknet/src/network.h	/^    int adam;$/;"	m	struct:network
add_bias	monodepth/darknet/src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	monodepth/darknet/src/image.c	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
all_a	monodepth/darknet/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon22
alpha	monodepth/darknet/src/layer.h	/^    float alpha;$/;"	m	struct:layer
alphanum_to_int	monodepth/darknet/src/utils.c	/^int alphanum_to_int(char c)$/;"	f
altNames	monodepth/darknet/darknet.py	/^altNames = None$/;"	v
anchors_comparator	monodepth/darknet/src/detector.c	/^int anchors_comparator(const void *pa, const void *pb)$/;"	f
anchors_t	monodepth/darknet/src/detector.c	/^} anchors_t;$/;"	t	typeref:struct:__anon48	file:
angle	monodepth/darknet/src/data.h	/^    float angle;$/;"	m	struct:load_args
angle	monodepth/darknet/src/layer.h	/^    float angle;$/;"	m	struct:layer
angle	monodepth/darknet/src/network.h	/^    float angle;$/;"	m	struct:network
app	sshgui.py	/^app = Application(master=root)$/;"	v
app14_color_transform	monodepth/darknet/src/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon14
arg	monodepth/darknet/3rdparty/include/pthread.h	/^  void *arg;$/;"	m	struct:ptw32_cleanup_t
args	monodepth/darknet/scripts/log_parser/log_parser.py	/^    args = parse_args()$/;"	v
args	monodepth/darknet/scripts/reval_voc.py	/^    args = parse_args()$/;"	v
args	monodepth/darknet/scripts/reval_voc_py3.py	/^    args = parse_args()$/;"	v
args	monodepth/monodepth_main.py	/^args = parser.parse_args()$/;"	v
args	monodepth/monodepth_simple.py	/^args = parser.parse_args()$/;"	v
args	monodepth/utils/evaluate_kitti.py	/^args = parser.parse_args()$/;"	v
array_to_image	monodepth/darknet/darknet.py	/^def array_to_image(arr):$/;"	f
asm_cpuid	monodepth/darknet/src/gemm.c	/^void asm_cpuid(uint32_t* abcd, uint32_t eax)$/;"	f
aspect	monodepth/darknet/src/data.h	/^    float aspect;$/;"	m	struct:load_args
aspect	monodepth/darknet/src/network.h	/^    float aspect;$/;"	m	struct:network
assignments	monodepth/darknet/scripts/kmeansiou.c	/^    int *assignments;$/;"	m	struct:__anon6	file:
augment_image_pair	monodepth/monodepth_dataloader.py	/^    def augment_image_pair(self, left_image, right_image):$/;"	m	class:MonodepthDataloader
average	monodepth/darknet/src/darknet.c	/^void average(int argc, char *argv[])$/;"	f
average_gradients	monodepth/average_gradients.py	/^def average_gradients(tower_grads):$/;"	f
avg	monodepth/darknet/src/demo.c	/^static float *avg;$/;"	v	file:
avg	monodepth/darknet/src/yolo_v2_class.cpp	/^	float *avg;$/;"	m	struct:detector_gpu_t	file:
avg_IOU	monodepth/darknet/scripts/gen_anchors.py	/^def avg_IOU(X,centroids):$/;"	f
avg_flipped_yolo	monodepth/darknet/src/yolo_layer.c	/^void avg_flipped_yolo(layer l)$/;"	f
avgpool_layer	monodepth/darknet/src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	monodepth/darknet/src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
b	monodepth/darknet/depth.py	/^        b=f.read(i)$/;"	v
b	monodepth/darknet/depth.py	/^        b=int(yy[c][2])$/;"	v
b	monodepth/darknet/single_depth.py	/^    b=int(yy[c][2])$/;"	v
b	monodepth/darknet/src/detector.c	/^	box b;$/;"	m	struct:__anon47	file:
back	monodepth/darknet/src/list.h	/^    node *back;$/;"	m	struct:list
background	monodepth/darknet/src/data.h	/^    int background;$/;"	m	struct:load_args
background	monodepth/darknet/src/layer.h	/^    int background;$/;"	m	struct:layer
backward	monodepth/darknet/src/layer.h	/^    void (*backward)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_activation_layer	monodepth/darknet/src/activation_layer.c	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	monodepth/darknet/src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	monodepth/darknet/src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	monodepth/darknet/src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
backward_bias	monodepth/darknet/src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	monodepth/darknet/src/connected_layer.c	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	monodepth/darknet/src/connected_layer.c	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	monodepth/darknet/src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	monodepth/darknet/src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	monodepth/darknet/src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	monodepth/darknet/src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	monodepth/darknet/src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_detection_layer	monodepth/darknet/src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	monodepth/darknet/src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropout_layer	monodepth/darknet/src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_gpu	monodepth/darknet/src/layer.h	/^    void (*backward_gpu)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_gru_layer	monodepth/darknet/src/gru_layer.c	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	monodepth/darknet/src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_local_layer	monodepth/darknet/src/local_layer.c	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	monodepth/darknet/src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_maxpool_layer	monodepth/darknet/src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_network	monodepth/darknet/src/network.c	/^void backward_network(network net, network_state state)$/;"	f
backward_normalization_layer	monodepth/darknet/src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	monodepth/darknet/src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	monodepth/darknet/src/region_layer.c	/^void backward_region_layer(const region_layer l, network_state state)$/;"	f
backward_region_layer_gpu	monodepth/darknet/src/region_layer.c	/^void backward_region_layer_gpu(region_layer l, network_state state)$/;"	f
backward_reorg_layer	monodepth/darknet/src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	monodepth/darknet/src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_old_layer	monodepth/darknet/src/reorg_old_layer.c	/^void backward_reorg_old_layer(const layer l, network_state state)$/;"	f
backward_reorg_old_layer_gpu	monodepth/darknet/src/reorg_old_layer.c	/^void backward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	monodepth/darknet/src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	monodepth/darknet/src/route_layer.c	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	monodepth/darknet/src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_scale_cpu	monodepth/darknet/src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	monodepth/darknet/src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	monodepth/darknet/src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_softmax_layer	monodepth/darknet/src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
backward_softmax_layer_gpu	monodepth/darknet/src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
backward_upsample_layer	monodepth/darknet/src/upsample_layer.c	/^void backward_upsample_layer(const layer l, network_state state)$/;"	f
backward_upsample_layer_gpu	monodepth/darknet/src/upsample_layer.c	/^void backward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
backward_yolo_layer	monodepth/darknet/src/yolo_layer.c	/^void backward_yolo_layer(const layer l, network_state state)$/;"	f
backward_yolo_layer_gpu	monodepth/darknet/src/yolo_layer.c	/^void backward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
bad_pixels	monodepth/utils/evaluate_kitti.py	/^            bad_pixels = np.logical_and(disp_diff >= 3, (disp_diff \/ gt_disp[mask]) >= 0.05)$/;"	v
basecfg	monodepth/darknet/src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	monodepth/darknet/src/layer.h	/^	int batch;$/;"	m	struct:__anon38
batch	monodepth/darknet/src/layer.h	/^    int batch;$/;"	m	struct:layer
batch	monodepth/darknet/src/network.h	/^    int batch;$/;"	m	struct:network
batch	monodepth/darknet/src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
batch_normalize	monodepth/darknet/src/layer.h	/^    int batch_normalize;$/;"	m	struct:layer
bbox	monodepth/darknet/src/box.h	/^	box bbox;$/;"	m	struct:detection
bbox	monodepth/darknet/src/yolo_v2_class.hpp	/^		bbox_t bbox;$/;"	m	struct:preview_boxes_t::preview_box_track_t
bbox_comparator	monodepth/darknet/src/compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	monodepth/darknet/src/compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class_id)$/;"	f
bbox_t	monodepth/darknet/src/yolo_v2_class.hpp	/^struct bbox_t {$/;"	s
bbox_t_container	monodepth/darknet/src/yolo_v2_class.hpp	/^struct bbox_t_container {$/;"	s
bbox_update	monodepth/darknet/src/compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class_id, int result)$/;"	f
bboxs	monodepth/darknet/scripts/get_openimages_dataset.py	/^    bboxs = csv.reader(csvfile, delimiter=',', quotechar='|')$/;"	v
bd_algo	monodepth/darknet/src/layer.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer
best_3d_shift	monodepth/darknet/src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	monodepth/darknet/src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
best_class	monodepth/darknet/src/box.h	/^	int best_class;$/;"	m	struct:detection_with_class
beta	monodepth/darknet/src/layer.h	/^    float beta;$/;"	m	struct:layer
bf_algo	monodepth/darknet/src/layer.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer
bflops	monodepth/darknet/src/layer.h	/^	float bflops;$/;"	m	struct:layer
bgindex	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
bias_match	monodepth/darknet/src/layer.h	/^    int bias_match;$/;"	m	struct:layer
bias_updates	monodepth/darknet/src/layer.h	/^    float *bias_updates;$/;"	m	struct:layer
bias_updates_gpu	monodepth/darknet/src/layer.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
biases	monodepth/darknet/src/layer.h	/^    float *biases;$/;"	m	struct:layer
biases_gpu	monodepth/darknet/src/layer.h	/^    float * biases_gpu;$/;"	m	struct:layer
bilinear_interpolate	monodepth/darknet/src/image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
bilinear_sampler_1d_h	monodepth/bilinear_sampler.py	/^def bilinear_sampler_1d_h(input_images, x_offset, wrap_mode='border', name='bilinear_sampler', **kwargs):$/;"	f
binarize_cpu	monodepth/darknet/src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	monodepth/darknet/src/image.c	/^image binarize_image(image im)$/;"	f
binarize_input	monodepth/darknet/src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	monodepth/darknet/src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binary	monodepth/darknet/src/layer.h	/^    int binary;$/;"	m	struct:layer
binary_input	monodepth/darknet/src/layer.h	/^    float *binary_input;$/;"	m	struct:layer
binary_input_gpu	monodepth/darknet/src/layer.h	/^    float *binary_input_gpu;$/;"	m	struct:layer
binary_weights	monodepth/darknet/src/layer.h	/^    float *binary_weights;$/;"	m	struct:layer
binary_weights_gpu	monodepth/darknet/src/layer.h	/^    float *binary_weights_gpu;$/;"	m	struct:layer
bits_per_channel	monodepth/darknet/src/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon11
blas_handle	monodepth/darknet/src/cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	monodepth/darknet/src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
board_to_string	monodepth/darknet/src/go.c	/^void board_to_string(char *s, float *board)$/;"	f
border_image	monodepth/darknet/src/image.c	/^image border_image(image a, int border)$/;"	f
bottom	monodepth/darknet/src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon43
bottom_offset	monodepth/darknet/src/yolo_v2_class.hpp	/^	size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
box	monodepth/darknet/src/box.h	/^} box;$/;"	t	typeref:struct:__anon39
box_intersection	monodepth/darknet/src/box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	monodepth/darknet/src/box.c	/^float box_iou(box a, box b)$/;"	f
box_label	monodepth/darknet/src/data.h	/^} box_label;$/;"	t	typeref:struct:__anon43
box_prob	monodepth/darknet/src/detector.c	/^} box_prob;$/;"	t	typeref:struct:__anon47	file:
box_rmse	monodepth/darknet/src/box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	monodepth/darknet/src/box.c	/^float box_union(box a, box b)$/;"	f
boxes	monodepth/darknet/src/data.h	/^    box **boxes;$/;"	m	struct:__anon41
boxes	monodepth/darknet/src/demo.c	/^static box *boxes;$/;"	v	file:
bpp	monodepth/darknet/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon22
buffer_start	monodepth/darknet/src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon9
buflen	monodepth/darknet/src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon9
build_losses	monodepth/monodepth_model.py	/^    def build_losses(self):$/;"	m	class:MonodepthModel
build_model	monodepth/monodepth_model.py	/^    def build_model(self):$/;"	m	class:MonodepthModel
build_outputs	monodepth/monodepth_model.py	/^    def build_outputs(self):$/;"	m	class:MonodepthModel
build_resnet50	monodepth/monodepth_model.py	/^    def build_resnet50(self):$/;"	m	class:MonodepthModel
build_summaries	monodepth/monodepth_model.py	/^    def build_summaries(self):$/;"	m	class:MonodepthModel
build_vgg	monodepth/monodepth_model.py	/^    def build_vgg(self):$/;"	m	class:MonodepthModel
burn_in	monodepth/darknet/src/network.h	/^    int burn_in;$/;"	m	struct:network
c	monodepth/darknet/src/data.h	/^	int c; \/\/ color depth$/;"	m	struct:load_args
c	monodepth/darknet/src/image.h	/^    int c;$/;"	m	struct:__anon32
c	monodepth/darknet/src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
c	monodepth/darknet/src/network.h	/^    int h, w, c;$/;"	m	struct:network
c	monodepth/darknet/src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
c	monodepth/darknet/src/yolo_v2_class.hpp	/^	int c;						\/\/ number of chanels (3 - for RGB)$/;"	m	struct:image_t
c_array	monodepth/darknet/darknet.py	/^def c_array(ctype, values):$/;"	f
calc_anchors	monodepth/darknet/src/detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show) {$/;"	f
calc_anchors	monodepth/darknet/src/detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show)$/;"	f
calculate_liberties	monodepth/darknet/src/go.c	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	monodepth/darknet/src/nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
camera_id	monodepth/utils/evaluate_kitti.py	/^            camera_id = cams[t_id]  # 2 is left, 3 is right$/;"	v
candidates	monodepth/darknet/src/yolo_v2_class.hpp	/^    bbox_t candidates[C_SHARP_MAX_OBJECTS];$/;"	m	struct:bbox_t_container
cap	monodepth/darknet/src/demo.c	/^static CvCapture * cap;$/;"	v	file:
car	monodepth/darknet/depth.py	/^        car=(721*0.54)\/(w[c][b][a]*1242*1.762)$/;"	v
car	monodepth/darknet/single_depth.py	/^    car=(721*0.54)\/(load_disparity[b][a]*1242*1.762)$/;"	v
catch	monodepth/darknet/3rdparty/include/pthread.h	1342;"	d
centers	monodepth/darknet/scripts/kmeansiou.c	/^    matrix centers;$/;"	m	struct:__anon6	file:
change_leaves	monodepth/darknet/src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	monodepth/darknet/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23
channel_order	monodepth/darknet/src/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon11
chdir	monodepth/darknet/src/unistd.h	32;"	d
check	setup.sh	/^function check() { lib_installed $1 && echo "$1 is installed" || echo "ERROR: $1 is NOT installed"; }$/;"	f
check_cuda	monodepth/darknet/src/yolo_v2_class.cpp	/^void check_cuda(cudaError_t status) {$/;"	f
check_error	monodepth/darknet/src/cuda.c	/^void check_error(cudaError_t status)$/;"	f
child	monodepth/darknet/src/tree.h	/^	int *child;$/;"	m	struct:__anon27
class_id	monodepth/darknet/src/box.c	/^    int class_id;$/;"	m	struct:__anon34	file:
class_id	monodepth/darknet/src/compare.c	/^    int class_id;$/;"	m	struct:__anon31	file:
class_id	monodepth/darknet/src/detector.c	/^	int class_id;$/;"	m	struct:__anon47	file:
class_scale	monodepth/darknet/src/layer.h	/^    float class_scale;$/;"	m	struct:layer
classes	monodepth/darknet/scripts/reval_voc.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	monodepth/darknet/scripts/reval_voc_py3.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	monodepth/darknet/scripts/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	monodepth/darknet/scripts/voc_label_difficult.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	monodepth/darknet/src/box.h	/^	int classes;$/;"	m	struct:detection
classes	monodepth/darknet/src/compare.c	/^    int classes;$/;"	m	struct:__anon31	file:
classes	monodepth/darknet/src/data.h	/^    int classes;$/;"	m	struct:load_args
classes	monodepth/darknet/src/layer.h	/^    int classes;$/;"	m	struct:layer
classes	monodepth/darknet/src/option_list.h	/^	int classes;$/;"	m	struct:__anon50
classfix	monodepth/darknet/src/layer.h	/^    int classfix;$/;"	m	struct:layer
classify	monodepth/darknet/darknet.py	/^def classify(net, meta, im):$/;"	f
cleanUpRout	monodepth/darknet/3rdparty/include/pthread.h	/^      ptw32_cleanup_callback_t cleanUpRout;$/;"	m	class:PThreadCleanup
closest_center	monodepth/darknet/scripts/kmeansiou.c	/^int closest_center(double *datum, matrix centers)$/;"	f
coco_classes	monodepth/darknet/src/coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	monodepth/darknet/src/coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	monodepth/darknet/src/detector.c	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
code	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon13
code_bits	monodepth/darknet/src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon14
code_buffer	monodepth/darknet/src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon14
code_buffer	monodepth/darknet/src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon18
codes	monodepth/darknet/src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon25
coeff	monodepth/darknet/src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon14::__anon15
coeff_h	monodepth/darknet/src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon14::__anon15
coeff_w	monodepth/darknet/src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon14::__anon15
col2im_add_pixel	monodepth/darknet/src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	monodepth/darknet/src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
col_image	monodepth/darknet/src/layer.h	/^    float *col_image;$/;"	m	struct:layer
col_image_gpu	monodepth/darknet/src/layer.h	/^    float * col_image_gpu;$/;"	m	struct:layer
collapse_image_layers	monodepth/darknet/src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	monodepth/darknet/src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	monodepth/darknet/src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	monodepth/darknet/src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon25
colors	monodepth/darknet/src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	monodepth/darknet/scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
cols	monodepth/darknet/src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
compare_by_lefts	monodepth/darknet/src/image.c	/^int compare_by_lefts(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_by_probs	monodepth/darknet/src/image.c	/^int compare_by_probs(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_networks	monodepth/darknet/src/network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
composite_3d	monodepth/darknet/src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	monodepth/darknet/src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
compute_errors	monodepth/utils/evaluation_utils.py	/^def compute_errors(gt, pred):$/;"	f
concat	monodepth/darknet/src/layer.h	/^    float *concat;$/;"	m	struct:layer
concat_data	monodepth/darknet/src/data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	monodepth/darknet/src/data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	monodepth/darknet/src/layer.h	/^    float *concat_delta;$/;"	m	struct:layer
concat_delta_gpu	monodepth/darknet/src/layer.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	monodepth/darknet/src/layer.h	/^    float * concat_gpu;$/;"	m	struct:layer
concat_matrix	monodepth/darknet/src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
connected_layer	monodepth/darknet/src/connected_layer.h	/^typedef layer connected_layer;$/;"	t
const	monodepth/darknet/src/getopt.c	38;"	d	file:
const_cpu	monodepth/darknet/src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	monodepth/darknet/src/utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	monodepth/darknet/src/image.c	/^void constrain_image(image im)$/;"	f
constrain_int	monodepth/darknet/src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
context	monodepth/darknet/src/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon29
contr_size	monodepth/darknet/src/yolo_console_dll.cpp	/^	int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
conv	monodepth/monodepth_model.py	/^    def conv(self, x, num_out_layers, kernel_size, stride, activation_fn=tf.nn.elu):$/;"	m	class:MonodepthModel
convDesc	monodepth/darknet/src/layer.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
conv_block	monodepth/monodepth_model.py	/^    def conv_block(self, x, num_out_layers, kernel_size):$/;"	m	class:MonodepthModel
convert	monodepth/darknet/scripts/voc_label.py	/^def convert(size, box):$/;"	f
convert	monodepth/darknet/scripts/voc_label_difficult.py	/^def convert(size, box):$/;"	f
convert_annotation	monodepth/darknet/scripts/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f
convert_annotation	monodepth/darknet/scripts/voc_label_difficult.py	/^def convert_annotation(year, image_id):$/;"	f
convert_disps_to_depths_kitti	monodepth/utils/evaluation_utils.py	/^def convert_disps_to_depths_kitti(gt_disparities, pred_disparities):$/;"	f
convolutional_layer	monodepth/darknet/src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	monodepth/darknet/src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	monodepth/darknet/src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
coord_scale	monodepth/darknet/src/layer.h	/^    float coord_scale;$/;"	m	struct:layer
coords	monodepth/darknet/src/layer.h	/^    int coords;$/;"	m	struct:layer
copy	monodepth/darknet/scripts/kmeansiou.c	/^void copy(double *x, double *y, int n)$/;"	f
copy_cpu	monodepth/darknet/src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_image	monodepth/darknet/src/image.c	/^image copy_image(image p)$/;"	f
copy_string	monodepth/darknet/src/utils.c	/^char *copy_string(char *s)$/;"	f
correct	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<bbox_t> correct(std::vector<bbox_t> result_vec) {$/;"	f	class:track_kalman
correct_boxes	monodepth/darknet/src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_region_boxes	monodepth/darknet/src/region_layer.c	/^void correct_region_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
correct_yolo_boxes	monodepth/darknet/src/yolo_layer.c	/^void correct_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
cost	monodepth/darknet/src/layer.h	/^    float *cost;$/;"	m	struct:layer
cost_layer	monodepth/darknet/src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_type	monodepth/darknet/src/layer.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
count_fields	monodepth/darknet/scripts/kmeansiou.c	/^int count_fields(char *line)$/;"	f
count_fields	monodepth/darknet/src/utils.c	/^int count_fields(char *line)$/;"	f
count_text_lines	monodepth/monodepth_main.py	/^def count_text_lines(file_path):$/;"	f
cpp_video_capture	monodepth/darknet/src/demo.c	/^static int cpp_video_capture = 0;$/;"	v	file:
cpu_gemm	monodepth/darknet/src/cpu_gemm.c	/^void cpu_gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_nn	monodepth/darknet/src/cpu_gemm.c	/^void cpu_gemm_nn(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_nt	monodepth/darknet/src/cpu_gemm.c	/^void cpu_gemm_nt(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_tn	monodepth/darknet/src/cpu_gemm.c	/^void cpu_gemm_tn(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_tt	monodepth/darknet/src/cpu_gemm.c	/^void cpu_gemm_tt(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
create_widgets	sshgui.py	/^    def create_widgets(self):$/;"	m	class:Application
crop	monodepth/utils/evaluate_kitti.py	/^                    crop = np.array([0.3324324 * gt_height,  0.91351351 * gt_height,   $/;"	v
crop	monodepth/utils/evaluate_kitti.py	/^                    crop = np.array([0.40810811 * gt_height,  0.99189189 * gt_height,   $/;"	v
crop_image	monodepth/darknet/src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	monodepth/darknet/src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
crop_mask	monodepth/utils/evaluate_kitti.py	/^                crop_mask = np.zeros(mask.shape)$/;"	v
csv_to_matrix	monodepth/darknet/scripts/kmeansiou.c	/^matrix csv_to_matrix(char *filename, int header)$/;"	f
csv_to_matrix	monodepth/darknet/src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
cuda_compare	monodepth/darknet/src/cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	monodepth/darknet/src/cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	monodepth/darknet/src/cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	monodepth/darknet/src/cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_make_array	monodepth/darknet/src/cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	monodepth/darknet/src/cuda.c	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_pull_array	monodepth/darknet/src/cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	monodepth/darknet/src/cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	monodepth/darknet/src/cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	monodepth/darknet/src/cuda.c	/^void cuda_set_device(int n) {}$/;"	f
cuda_set_device	monodepth/darknet/src/cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnn_convolutional_setup	monodepth/darknet/src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l, int cudnn_preference)$/;"	f
cudnn_fastest	monodepth/darknet/src/cuda.h	/^enum {cudnn_fastest, cudnn_smallest};$/;"	e	enum:__anon46
cudnn_handle	monodepth/darknet/src/cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cudnn_smallest	monodepth/darknet/src/cuda.h	/^enum {cudnn_fastest, cudnn_smallest};$/;"	e	enum:__anon46
cur_bbox_vec	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bbox_t> cur_bbox_vec;$/;"	m	class:Tracker_optflow
cur_gpu_id	monodepth/darknet/src/yolo_v2_class.hpp	/^	const int cur_gpu_id;$/;"	m	class:Detector
cur_pts_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
cur_pts_flow_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
cur_x	monodepth/darknet/src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25
cur_y	monodepth/darknet/src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25
current_class_id	monodepth/darknet/src/compare.c	/^int current_class_id = 0;$/;"	v
current_detection	monodepth/darknet/src/yolo_v2_class.hpp	/^		bool current_detection;$/;"	m	struct:preview_boxes_t::preview_box_track_t
custom_get_region_detections	monodepth/darknet/src/network.c	/^void custom_get_region_detections(layer l, int w, int h, int net_w, int net_h, float thresh, int *map, float hier, int relative, detection *dets, int letter)$/;"	f
cwd	monodepth/darknet/darknet.py	/^    cwd = os.path.dirname(__file__)$/;"	v
cweights	monodepth/darknet/src/layer.h	/^    char  *cweights;$/;"	m	struct:layer
d	monodepth/darknet/depth.py	/^            d=373$/;"	v
d	monodepth/darknet/depth.py	/^        d=0$/;"	v
d	monodepth/darknet/depth.py	/^d=0$/;"	v
d	monodepth/darknet/single_depth.py	/^        d=373$/;"	v
d	monodepth/darknet/single_depth.py	/^    d=0$/;"	v
d	monodepth/darknet/single_depth.py	/^d=0$/;"	v
d	monodepth/darknet/src/data.h	/^    data *d;$/;"	m	struct:load_args
d	monodepth/darknet/test.py	/^d=0$/;"	v
d1_all	monodepth/utils/evaluate_kitti.py	/^    d1_all  = np.zeros(num_samples, np.float32)$/;"	v
data	monodepth/darknet/src/data.h	/^} data;$/;"	t	typeref:struct:__anon41
data	monodepth/darknet/src/go.c	/^    char **data;$/;"	m	struct:__anon45	file:
data	monodepth/darknet/src/image.h	/^    float *data;$/;"	m	struct:__anon32
data	monodepth/darknet/src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon14::__anon15
data	monodepth/darknet/src/yolo_v2_class.hpp	/^	float *data;				\/\/ pointer to the image data$/;"	m	struct:image_t
data_type	monodepth/darknet/src/data.h	/^} data_type;$/;"	t	typeref:enum:__anon42
dbox	monodepth/darknet/src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon40
dc_pred	monodepth/darknet/src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon14::__anon15
dct_bfly32o	monodepth/darknet/src/stb_image.h	2253;"	d
dct_bfly32o	monodepth/darknet/src/stb_image.h	2387;"	d
dct_bfly32o	monodepth/darknet/src/stb_image.h	2439;"	d
dct_bfly32o	monodepth/darknet/src/stb_image.h	2597;"	d
dct_const	monodepth/darknet/src/stb_image.h	2225;"	d
dct_const	monodepth/darknet/src/stb_image.h	2382;"	d
dct_interleave16	monodepth/darknet/src/stb_image.h	2270;"	d
dct_interleave16	monodepth/darknet/src/stb_image.h	2389;"	d
dct_interleave8	monodepth/darknet/src/stb_image.h	2264;"	d
dct_interleave8	monodepth/darknet/src/stb_image.h	2388;"	d
dct_long_mac	monodepth/darknet/src/stb_image.h	2420;"	d
dct_long_mac	monodepth/darknet/src/stb_image.h	2593;"	d
dct_long_mul	monodepth/darknet/src/stb_image.h	2416;"	d
dct_long_mul	monodepth/darknet/src/stb_image.h	2592;"	d
dct_pass	monodepth/darknet/src/stb_image.h	2275;"	d
dct_pass	monodepth/darknet/src/stb_image.h	2390;"	d
dct_pass	monodepth/darknet/src/stb_image.h	2447;"	d
dct_pass	monodepth/darknet/src/stb_image.h	2598;"	d
dct_rot	monodepth/darknet/src/stb_image.h	2229;"	d
dct_rot	monodepth/darknet/src/stb_image.h	2383;"	d
dct_trn16	monodepth/darknet/src/stb_image.h	2507;"	d
dct_trn16	monodepth/darknet/src/stb_image.h	2529;"	d
dct_trn32	monodepth/darknet/src/stb_image.h	2508;"	d
dct_trn32	monodepth/darknet/src/stb_image.h	2530;"	d
dct_trn64	monodepth/darknet/src/stb_image.h	2509;"	d
dct_trn64	monodepth/darknet/src/stb_image.h	2531;"	d
dct_trn8_16	monodepth/darknet/src/stb_image.h	2553;"	d
dct_trn8_16	monodepth/darknet/src/stb_image.h	2588;"	d
dct_trn8_32	monodepth/darknet/src/stb_image.h	2554;"	d
dct_trn8_32	monodepth/darknet/src/stb_image.h	2589;"	d
dct_trn8_8	monodepth/darknet/src/stb_image.h	2552;"	d
dct_trn8_8	monodepth/darknet/src/stb_image.h	2587;"	d
dct_wadd	monodepth/darknet/src/stb_image.h	2243;"	d
dct_wadd	monodepth/darknet/src/stb_image.h	2385;"	d
dct_wadd	monodepth/darknet/src/stb_image.h	2429;"	d
dct_wadd	monodepth/darknet/src/stb_image.h	2595;"	d
dct_widen	monodepth/darknet/src/stb_image.h	2238;"	d
dct_widen	monodepth/darknet/src/stb_image.h	2384;"	d
dct_widen	monodepth/darknet/src/stb_image.h	2424;"	d
dct_widen	monodepth/darknet/src/stb_image.h	2594;"	d
dct_wsub	monodepth/darknet/src/stb_image.h	2248;"	d
dct_wsub	monodepth/darknet/src/stb_image.h	2386;"	d
dct_wsub	monodepth/darknet/src/stb_image.h	2434;"	d
dct_wsub	monodepth/darknet/src/stb_image.h	2596;"	d
ddstTensorDesc	monodepth/darknet/src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
decay	monodepth/darknet/src/layer.h	/^	float decay;$/;"	m	struct:__anon38
decay	monodepth/darknet/src/network.h	/^    float decay;$/;"	m	struct:network
decode_box	monodepth/darknet/src/box.c	/^box decode_box(box b, box anchor)$/;"	f
deconv	monodepth/monodepth_model.py	/^    def deconv(self, x, num_out_layers, kernel_size, scale):$/;"	m	class:MonodepthModel
deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.h	/^typedef layer deconvolutional_layer;$/;"	t
deconvolutional_out_height	monodepth/darknet/src/deconvolutional_layer.c	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	monodepth/darknet/src/deconvolutional_layer.c	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	monodepth/darknet/src/deconvolutional_layer.c	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
deinter_cpu	monodepth/darknet/src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	monodepth/darknet/scripts/kmeansiou.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
del_arg	monodepth/darknet/src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delay	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
delta	monodepth/darknet/src/layer.h	/^    float * delta;$/;"	m	struct:layer
delta	monodepth/darknet/src/network.h	/^    float *delta;$/;"	m	struct:network_state
delta	monodepth/darknet/src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon13
delta_gpu	monodepth/darknet/src/layer.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_region_box	monodepth/darknet/src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	monodepth/darknet/src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class_id, int classes, tree *hier, float scale, float *avg_cat, int focal_loss)$/;"	f
delta_yolo_box	monodepth/darknet/src/yolo_layer.c	/^float delta_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_yolo_class	monodepth/darknet/src/yolo_layer.c	/^void delta_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, int focal_loss)$/;"	f
demo	monodepth/darknet/src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, float hier_thresh, int cam_index, const char *filename, char **names, int classes,$/;"	f
demo_alphabet	monodepth/darknet/src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	monodepth/darknet/src/art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	monodepth/darknet/src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	monodepth/darknet/src/classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_ext_output	monodepth/darknet/src/demo.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_index	monodepth/darknet/src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	monodepth/darknet/src/yolo_v2_class.cpp	/^	int demo_index;$/;"	m	struct:detector_gpu_t	file:
demo_names	monodepth/darknet/src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_thresh	monodepth/darknet/src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
denormalize_connected_layer	monodepth/darknet/src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	monodepth/darknet/src/darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
depth	monodepth/darknet/src/stb_image.h	/^   int depth;$/;"	m	struct:__anon20
depth	monodepth/utils/evaluate_kitti.py	/^            depth = generate_depth_map(gt_calib[t_id], gt_files[t_id], im_sizes[t_id], camera_id, False, True)$/;"	v
depth_pred	monodepth/utils/evaluate_kitti.py	/^            depth_pred = (baseline * focal_length) \/ disp_pred$/;"	v
dequant	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon14
derivative	monodepth/darknet/src/box.c	/^dbox derivative(box a, box b)$/;"	f
det	monodepth/darknet/src/box.h	/^	detection det;$/;"	m	struct:detection_with_class
det_img	monodepth/darknet/src/demo.c	/^IplImage* det_img;$/;"	v
det_s	monodepth/darknet/src/demo.c	/^static image det_s;$/;"	v	file:
detect	monodepth/darknet/darknet.py	/^def detect(net, meta, image, thresh=.5, hier_thresh=.5, nms=.45, debug= False):$/;"	f
detect	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::detect(image_t img, float thresh, bool use_mean)$/;"	f	class:Detector
detect	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::detect(std::string image_filename, float thresh, bool use_mean)$/;"	f	class:Detector
detect	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bbox_t> detect(cv::Mat mat, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detect_image	monodepth/darknet/src/yolo_v2_class.cpp	/^int detect_image(const char *filename, bbox_t_container &container) $/;"	f
detect_in_thread	monodepth/darknet/src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_mat	monodepth/darknet/src/yolo_v2_class.cpp	/^int detect_mat(const uint8_t* data, const size_t data_length, bbox_t_container &container) {$/;"	f
detect_resized	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bbox_t> detect_resized(image_t img, int init_w, int init_h, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detection	monodepth/darknet/src/box.h	/^typedef struct detection {$/;"	s
detection	monodepth/darknet/src/box.h	/^} detection;$/;"	t	typeref:struct:detection
detection_layer	monodepth/darknet/src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
detection_with_class	monodepth/darknet/src/box.h	/^typedef struct detection_with_class {$/;"	s
detection_with_class	monodepth/darknet/src/box.h	/^} detection_with_class;$/;"	t	typeref:struct:detection_with_class
detections_comparator	monodepth/darknet/src/detector.c	/^int detections_comparator(const void *pa, const void *pb)$/;"	f
detector	monodepth/darknet/src/yolo_v2_class.cpp	/^static std::unique_ptr<Detector> detector;$/;"	v	file:
detector_gpu_ptr	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::shared_ptr<void> detector_gpu_ptr;$/;"	m	class:Detector
detector_gpu_t	monodepth/darknet/src/yolo_v2_class.cpp	/^struct detector_gpu_t {$/;"	s	file:
dh	monodepth/darknet/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon40
dice_labels	monodepth/darknet/src/dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
dintersect	monodepth/darknet/src/box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	monodepth/darknet/src/box.c	/^dbox diou(box a, box b)$/;"	f
disp_diff	monodepth/utils/evaluate_kitti.py	/^            disp_diff = np.abs(gt_disp[mask] - pred_disp[mask])$/;"	v
disp_pred	monodepth/utils/evaluate_kitti.py	/^            disp_pred = cv2.resize(pred_disparities[t_id], (im_sizes[t_id][1], im_sizes[t_id][0]), interpolation=cv2.INTER_LINEAR)$/;"	v
disp_pred	monodepth/utils/evaluate_kitti.py	/^            disp_pred = disp_pred * disp_pred.shape[1]$/;"	v
dispose	monodepth/darknet/src/yolo_v2_class.cpp	/^int dispose() {$/;"	f
dist	monodepth/darknet/scripts/kmeansiou.c	/^double dist(double *x, double *y, int n)$/;"	f
dist_array	monodepth/darknet/src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
dist_to_closest_center	monodepth/darknet/scripts/kmeansiou.c	/^double dist_to_closest_center(double *datum, matrix centers)$/;"	f
distance_from_edge	monodepth/darknet/src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	monodepth/darknet/src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
do_kmeans	monodepth/darknet/scripts/kmeansiou.c	/^model do_kmeans(matrix data, int k)$/;"	f
do_nms	monodepth/darknet/src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	monodepth/darknet/darknet.py	/^do_nms_obj = lib.do_nms_obj$/;"	v
do_nms_obj	monodepth/darknet/src/box.c	/^void do_nms_obj(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort	monodepth/darknet/darknet.py	/^do_nms_sort = lib.do_nms_sort$/;"	v
do_nms_sort	monodepth/darknet/src/box.c	/^void do_nms_sort(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort_v2	monodepth/darknet/src/box.c	/^void do_nms_sort_v2(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_python_eval	monodepth/darknet/scripts/reval_voc.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_python_eval	monodepth/darknet/scripts/reval_voc_py3.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
does_cost	monodepth/darknet/src/layer.h	/^    int does_cost;$/;"	m	struct:layer
done	monodepth/darknet/3rdparty/include/pthread.h	/^  int          done;        \/* indicates if user function has been executed *\/$/;"	m	struct:pthread_once_t_
dontload	monodepth/darknet/src/layer.h	/^    int dontload;$/;"	m	struct:layer
dontloadscales	monodepth/darknet/src/layer.h	/^    int dontloadscales;$/;"	m	struct:layer
dot	monodepth/darknet/src/layer.h	/^    float dot;$/;"	m	struct:layer
dot_cpu	monodepth/darknet/src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
draw	monodepth/darknet/src/yolo_v2_class.hpp	/^	void draw(cv::Mat draw_mat, bool show_small_boxes = false)$/;"	f	class:preview_boxes_t
draw_bbox	monodepth/darknet/src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	monodepth/darknet/src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	monodepth/darknet/src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_boxes	monodepth/darknet/src/yolo_console_dll.cpp	/^void draw_boxes(cv::Mat mat_img, std::vector<bbox_t> result_vec, std::vector<std::string> obj_names, $/;"	f
draw_detections	monodepth/darknet/src/image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv	monodepth/darknet/src/image.c	/^void draw_detections_cv(IplImage* show_img, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv_v3	monodepth/darknet/src/image.c	/^void draw_detections_cv_v3(IplImage* show_img, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_detections_v3	monodepth/darknet/src/image.c	/^void draw_detections_v3(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_label	monodepth/darknet/src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
draw_train_chart	monodepth/darknet/src/image.c	/^IplImage* draw_train_chart(float max_img_loss, int max_batches, int number_of_lines, int img_size)$/;"	f
draw_train_loss	monodepth/darknet/src/image.c	/^void draw_train_loss(IplImage* img, int img_size, float avg_loss, float max_img_loss, int current_batch, int max_batches)$/;"	f
dropout_layer	monodepth/darknet/src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dsrcTensorDesc	monodepth/darknet/src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	monodepth/darknet/src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dst_grey	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat dst_grey;$/;"	m	class:Tracker_optflow
dst_grey_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dst_mat_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dunion	monodepth/darknet/src/box.c	/^dbox dunion(box a, box b)$/;"	f
dup2	monodepth/darknet/src/unistd.h	26;"	d
dw	monodepth/darknet/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon40
dweightDesc	monodepth/darknet/src/layer.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer
dx	monodepth/darknet/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon40
dx_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
dy	monodepth/darknet/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon40
dy_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
eflags	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
elo	monodepth/darknet/src/compare.c	/^    float elo;$/;"	m	struct:__anon31	file:
elo_comparator	monodepth/darknet/src/compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	monodepth/darknet/src/compare.c	/^    float *elos;$/;"	m	struct:__anon31	file:
elu_activate	monodepth/darknet/src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_gradient	monodepth/darknet/src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	monodepth/darknet/src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encode_box	monodepth/darknet/src/box.c	/^box encode_box(box b, box anchor)$/;"	f
engine_go	monodepth/darknet/src/go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
entry_index	monodepth/darknet/src/region_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	monodepth/darknet/src/yolo_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
envKeys	monodepth/darknet/darknet.py	/^    envKeys = list()$/;"	v
eob_run	monodepth/darknet/src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon14
eof	monodepth/darknet/src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon8
epoch	monodepth/darknet/src/network.h	/^    float epoch;$/;"	m	struct:network
eps	monodepth/darknet/src/layer.h	/^	float eps;$/;"	m	struct:__anon38
eps	monodepth/darknet/src/layer.h	/^    float eps;$/;"	m	struct:layer
eps	monodepth/darknet/src/network.h	/^    float eps;$/;"	m	struct:network
err	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat status, err;$/;"	m	class:Tracker_optflow
err_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
errno	monodepth/darknet/3rdparty/include/pthread.h	1254;"	d
error	monodepth/darknet/scripts/kmeansiou.c	/^void error(char *s){$/;"	f
error	monodepth/darknet/src/utils.c	/^void error(const char *s)$/;"	f
eval_cifar_csv	monodepth/darknet/src/cifar.c	/^void eval_cifar_csv()$/;"	f
exchange	monodepth/darknet/src/getopt.c	/^exchange (argv)$/;"	f	file:
execute	monodepth/darknet/3rdparty/include/pthread.h	/^          void execute( int exec )$/;"	f	class:PThreadCleanup
executeIt	monodepth/darknet/3rdparty/include/pthread.h	/^          int             executeIt;$/;"	m	class:PThreadCleanup
execve	monodepth/darknet/src/unistd.h	27;"	d
expanded	monodepth/darknet/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon20
exposure	monodepth/darknet/src/data.h	/^    float exposure;$/;"	m	struct:load_args
exposure	monodepth/darknet/src/layer.h	/^    float exposure;$/;"	m	struct:layer
exposure	monodepth/darknet/src/network.h	/^    float exposure;$/;"	m	struct:network
exposure_image	monodepth/darknet/src/image.c	/^void exposure_image(image im, float sat)$/;"	f
extract_cifar	monodepth/darknet/src/cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	monodepth/darknet/src/voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
extrapolate_coords_t	monodepth/darknet/src/yolo_console_dll.cpp	/^class extrapolate_coords_t {$/;"	c	file:
f	monodepth/darknet/depth.py	/^f=open(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/r.txt","r+")$/;"	v
f	monodepth/darknet/writeToFile2.py	/^f= open("t.txt","w+")$/;"	v
f	monodepth/r.py	/^     f = os.path.join(path, filename)$/;"	v
f	monodepth/writeToFile.py	/^f= open("list.txt","w+")$/;"	v
fast	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon17
fast	monodepth/darknet/src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon13
fast_ac	monodepth/darknet/src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon14
fetch_in_thread	monodepth/darknet/src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetgo	monodepth/darknet/src/go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	monodepth/darknet/scripts/kmeansiou.c	/^char *fgetl(FILE *fp)$/;"	f
fgetl	monodepth/darknet/src/utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	monodepth/darknet/src/utils.c	/^void file_error(char *s)$/;"	f
filename	monodepth/darknet/depth.py	/^    filename="\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/collisions\/"+"collisions"+str(y)+".jpg"$/;"	v
filename	monodepth/darknet/single_depth.py	/^filename="\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/collisions.jpg"$/;"	v
filename	monodepth/darknet/src/compare.c	/^    char *filename;$/;"	m	struct:__anon31	file:
fileno	monodepth/darknet/src/unistd.h	30;"	d
fill_cpu	monodepth/darknet/src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	monodepth/darknet/src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	monodepth/darknet/src/image.c	/^void fill_image(image m, float s)$/;"	f
fill_network_boxes	monodepth/darknet/src/network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter)$/;"	f
fill_truth	monodepth/darknet/src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	monodepth/darknet/src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	monodepth/darknet/src/data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy,$/;"	f
fill_truth_region	monodepth/darknet/src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	monodepth/darknet/src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	monodepth/darknet/scripts/kmeansiou.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_arg	monodepth/darknet/src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	monodepth/darknet/scripts/kmeansiou.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_char_arg	monodepth/darknet/src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	monodepth/darknet/scripts/kmeansiou.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_float_arg	monodepth/darknet/src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	monodepth/darknet/scripts/kmeansiou.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_int_arg	monodepth/darknet/src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	monodepth/darknet/src/utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_extension	monodepth/darknet/src/utils.c	/^void find_replace_extension(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	monodepth/darknet/src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
first	monodepth/darknet/src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon24
first_nonopt	monodepth/darknet/src/getopt.c	/^static int first_nonopt;$/;"	v	file:
first_row_filter	monodepth/darknet/src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon17
firstsymbol	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon17
fix_data_captcha	monodepth/darknet/src/captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
flag	monodepth/darknet/src/getopt.h	/^  int *flag;$/;"	m	struct:option
flag_exit	monodepth/darknet/src/demo.c	/^static int flag_exit;$/;"	v	file:
flags	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
flatten	monodepth/darknet/src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip	monodepth/darknet/src/data.h	/^    int flip;$/;"	m	struct:load_args
flip	monodepth/darknet/src/layer.h	/^    int flip;$/;"	m	struct:layer
flip	monodepth/darknet/src/network.h	/^    int flip; \/\/ horizontal flip 50% probability augmentaiont for classifier training (default = 1)$/;"	m	struct:network
flip_board	monodepth/darknet/src/go.c	/^void flip_board(float *board)$/;"	f
flip_image	monodepth/darknet/src/image.c	/^void flip_image(image a)$/;"	f
flipped	monodepth/darknet/src/layer.h	/^    int flipped;$/;"	m	struct:layer
float_abs_compare	monodepth/darknet/src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	monodepth/darknet/src/rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon35	file:
float_pair	monodepth/darknet/src/rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon33	file:
float_to_box	monodepth/darknet/src/box.c	/^box float_to_box(float *f)$/;"	f
float_to_box_stride	monodepth/darknet/src/yolo_layer.c	/^static box float_to_box_stride(float *f, int stride)$/;"	f	file:
float_to_image	monodepth/darknet/src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
flow_error	monodepth/darknet/src/yolo_v2_class.hpp	/^	const int flow_error;$/;"	m	class:Tracker_optflow
focal_loss	monodepth/darknet/src/layer.h	/^	int focal_loss;$/;"	m	struct:layer
focus	monodepth/darknet/src/layer.h	/^	float focus;$/;"	m	struct:layer
font	monodepth/darknet/data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
forced	monodepth/darknet/src/layer.h	/^    int forced;$/;"	m	struct:layer
forgot_delta	monodepth/darknet/src/layer.h	/^    float *forgot_delta;$/;"	m	struct:layer
forgot_delta_gpu	monodepth/darknet/src/layer.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	monodepth/darknet/src/layer.h	/^    float *forgot_state;$/;"	m	struct:layer
forgot_state_gpu	monodepth/darknet/src/layer.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	monodepth/darknet/src/layer.h	/^    void (*forward)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_activation_layer	monodepth/darknet/src/activation_layer.c	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	monodepth/darknet/src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	monodepth/darknet/src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	monodepth/darknet/src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_connected_layer	monodepth/darknet/src/connected_layer.c	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	monodepth/darknet/src/connected_layer.c	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	monodepth/darknet/src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	monodepth/darknet/src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	monodepth/darknet/src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	monodepth/darknet/src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_detection_layer	monodepth/darknet/src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	monodepth/darknet/src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	monodepth/darknet/src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_gpu	monodepth/darknet/src/layer.h	/^    void (*forward_gpu)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_gru_layer	monodepth/darknet/src/gru_layer.c	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	monodepth/darknet/src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_local_layer	monodepth/darknet/src/local_layer.c	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	monodepth/darknet/src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_maxpool_layer	monodepth/darknet/src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_network	monodepth/darknet/src/network.c	/^void forward_network(network net, network_state state)$/;"	f
forward_normalization_layer	monodepth/darknet/src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	monodepth/darknet/src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	monodepth/darknet/src/region_layer.c	/^void forward_region_layer(const region_layer l, network_state state)$/;"	f
forward_region_layer_gpu	monodepth/darknet/src/region_layer.c	/^void forward_region_layer_gpu(const region_layer l, network_state state)$/;"	f
forward_reorg_layer	monodepth/darknet/src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	monodepth/darknet/src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_reorg_old_layer	monodepth/darknet/src/reorg_old_layer.c	/^void forward_reorg_old_layer(const layer l, network_state state)$/;"	f
forward_reorg_old_layer_gpu	monodepth/darknet/src/reorg_old_layer.c	/^void forward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	monodepth/darknet/src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	monodepth/darknet/src/route_layer.c	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	monodepth/darknet/src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_shortcut_layer	monodepth/darknet/src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	monodepth/darknet/src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	monodepth/darknet/src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
forward_softmax_layer_gpu	monodepth/darknet/src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state state)$/;"	f
forward_upsample_layer	monodepth/darknet/src/upsample_layer.c	/^void forward_upsample_layer(const layer l, network_state net)$/;"	f
forward_upsample_layer_gpu	monodepth/darknet/src/upsample_layer.c	/^void forward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
forward_yolo_layer	monodepth/darknet/src/yolo_layer.c	/^void forward_yolo_layer(const layer l, network_state state)$/;"	f
forward_yolo_layer_gpu	monodepth/darknet/src/yolo_layer.c	/^void forward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
fps	monodepth/darknet/src/demo.c	/^static float fps = 0;$/;"	v	file:
frames_counter	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int frames_counter;\/\/ counter of frames on which the object was detected$/;"	m	struct:bbox_t
frames_history	monodepth/darknet/src/yolo_v2_class.hpp	/^	enum { frames_history = 30 };	\/\/ how long to keep the history saved$/;"	e	enum:preview_boxes_t::__anon44
free_data	monodepth/darknet/src/data.c	/^void free_data(data d)$/;"	f
free_detections	monodepth/darknet/darknet.py	/^free_detections = lib.free_detections$/;"	v
free_detections	monodepth/darknet/src/network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_image	monodepth/darknet/darknet.py	/^free_image = lib.free_image$/;"	v
free_image	monodepth/darknet/src/image.c	/^void free_image(image m)$/;"	f
free_image	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API void Detector::free_image(image_t m)$/;"	f	class:Detector
free_layer	monodepth/darknet/src/layer.c	/^void free_layer(layer l)$/;"	f
free_list	monodepth/darknet/src/list.c	/^void free_list(list *l)$/;"	f
free_list_contents	monodepth/darknet/src/list.c	/^void free_list_contents(list *l)$/;"	f
free_list_contents_kvp	monodepth/darknet/src/list.c	/^void free_list_contents_kvp(list *l)$/;"	f
free_matrix	monodepth/darknet/src/matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	monodepth/darknet/src/network.c	/^void free_network(network net)$/;"	f
free_node	monodepth/darknet/src/list.c	/^void free_node(node *n)$/;"	f
free_ptrs	monodepth/darknet/darknet.py	/^free_ptrs = lib.free_ptrs$/;"	v
free_ptrs	monodepth/darknet/src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	monodepth/darknet/src/parser.c	/^void free_section(section *s)$/;"	f
front	monodepth/darknet/src/list.h	/^    node *front;$/;"	m	struct:list
ftruncate	monodepth/darknet/src/unistd.h	28;"	d
func	monodepth/darknet/src/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon29
fuse_conv_batchnorm	monodepth/darknet/src/network.c	/^void fuse_conv_batchnorm(network net)$/;"	f
fw_algo	monodepth/darknet/src/layer.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer
g	monodepth/darknet/depth.py	/^g=r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/ImagesNormal\/Raw\/"$/;"	v
g1	monodepth/darknet/depth.py	/^    g1=g+"my_image"+str(y)+".jpg"$/;"	v
gamma	monodepth/darknet/src/network.h	/^    float gamma;$/;"	m	struct:network
gate_delta_gpu	monodepth/darknet/src/layer.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	monodepth/darknet/src/layer.h	/^    float * gate_gpu;$/;"	m	struct:layer
gemm	monodepth/darknet/src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	monodepth/darknet/src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	monodepth/darknet/src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_gpu	monodepth/darknet/src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_nn	monodepth/darknet/src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt	monodepth/darknet/src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_ongpu	monodepth/darknet/src/gemm.c	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_tn	monodepth/darknet/src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	monodepth/darknet/src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
generate_depth_map	monodepth/utils/evaluation_utils.py	/^def generate_depth_map(calib_dir, velo_file_name, im_shape, cam=2, interp=False, vel_depth=False):$/;"	f
generate_image_left	monodepth/monodepth_model.py	/^    def generate_image_left(self, img, disp):$/;"	m	class:MonodepthModel
generate_image_right	monodepth/monodepth_model.py	/^    def generate_image_right(self, img, disp):$/;"	m	class:MonodepthModel
generate_move	monodepth/darknet/src/go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	monodepth/darknet/src/rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
get_activation	monodepth/darknet/src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	monodepth/darknet/src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_actual_detections	monodepth/darknet/src/image.c	/^detection_with_class* get_actual_detections(detection *dets, int dets_num, float thresh, int* selected_detections_num)$/;"	f
get_capture_video_stream	monodepth/darknet/src/http_stream.cpp	/^CvCapture* get_capture_video_stream(char *path) {$/;"	f
get_capture_webcam	monodepth/darknet/src/http_stream.cpp	/^CvCapture* get_capture_webcam(int index) {$/;"	f
get_coco_image_id	monodepth/darknet/src/coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	monodepth/darknet/src/detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	monodepth/darknet/src/image.c	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	monodepth/darknet/src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	monodepth/darknet/src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	monodepth/darknet/src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	monodepth/darknet/src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	monodepth/darknet/src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	monodepth/darknet/src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_cuda_stream	monodepth/darknet/src/cuda.c	/^cudaStream_t get_cuda_stream() {$/;"	f
get_current_batch	monodepth/darknet/src/network.c	/^int get_current_batch(network net)$/;"	f
get_current_rate	monodepth/darknet/src/network.c	/^float get_current_rate(network net)$/;"	f
get_data_part	monodepth/darknet/src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	monodepth/darknet/src/deconvolutional_layer.c	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	monodepth/darknet/src/deconvolutional_layer.c	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	monodepth/darknet/src/detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_detection_detections	monodepth/darknet/src/detection_layer.c	/^void get_detection_detections(layer l, int w, int h, float thresh, detection *dets)$/;"	f
get_disp	monodepth/monodepth_model.py	/^    def get_disp(self, x):$/;"	m	class:MonodepthModel
get_disparity_smoothness	monodepth/monodepth_model.py	/^    def get_disparity_smoothness(self, disp, pyramid):$/;"	m	class:MonodepthModel
get_file_name_and_ext	monodepth/darknet/scripts/log_parser/log_parser.py	/^def get_file_name_and_ext(filename):$/;"	f
get_focal_length_baseline	monodepth/utils/evaluation_utils.py	/^def get_focal_length_baseline(calib_dir, cam):$/;"	f
get_hierarchy_probability	monodepth/darknet/src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream	monodepth/darknet/src/image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_from_stream_cpp	monodepth/darknet/src/image.c	/^image get_image_from_stream_cpp(CvCapture *cap)$/;"	f
get_image_from_stream_letterbox	monodepth/darknet/src/image.c	/^image get_image_from_stream_letterbox(CvCapture *cap, int w, int h, int c, IplImage** in_img, int cpp_video_capture, int dont_close)$/;"	f
get_image_from_stream_resize	monodepth/darknet/src/image.c	/^image get_image_from_stream_resize(CvCapture *cap, int w, int h, int c, IplImage** in_img, int cpp_video_capture, int dont_close)$/;"	f
get_image_layer	monodepth/darknet/src/image.c	/^image get_image_layer(image m, int l)$/;"	f
get_label	monodepth/darknet/src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_label_v3	monodepth/darknet/src/image.c	/^image get_label_v3(image **characters, char *string, int size)$/;"	f
get_labels	monodepth/darknet/src/data.c	/^char **get_labels(char *filename)$/;"	f
get_labels_custom	monodepth/darknet/src/data.c	/^char **get_labels_custom(char *filename, int *size)$/;"	f
get_layer_string	monodepth/darknet/src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	monodepth/darknet/src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	monodepth/darknet/src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_metadata	monodepth/darknet/src/option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_net_color_depth	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_color_depth() const {$/;"	f	class:Detector
get_net_height	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_height() const {$/;"	f	class:Detector
get_net_width	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_width() const {$/;"	f	class:Detector
get_network_boxes	monodepth/darknet/darknet.py	/^get_network_boxes = lib.get_network_boxes$/;"	v
get_network_boxes	monodepth/darknet/src/network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num, int letter)$/;"	f
get_network_cost	monodepth/darknet/src/network.c	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	monodepth/darknet/src/network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	monodepth/darknet/src/network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	monodepth/darknet/src/network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	monodepth/darknet/src/network.c	/^int get_network_input_size(network net)$/;"	f
get_network_layer	monodepth/darknet/src/network.c	/^layer* get_network_layer(network* net, int i)$/;"	f
get_network_output	monodepth/darknet/src/network.c	/^float *get_network_output(network net)$/;"	f
get_network_output_size	monodepth/darknet/src/network.c	/^int get_network_output_size(network net)$/;"	f
get_next_batch	monodepth/darknet/src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	monodepth/darknet/src/data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	monodepth/darknet/src/image.c	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	monodepth/darknet/src/image.c	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_policy	monodepth/darknet/src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	monodepth/darknet/src/network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	monodepth/darknet/src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	monodepth/darknet/src/data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	monodepth/darknet/src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	monodepth/darknet/src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	monodepth/darknet/src/region_layer.c	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map)$/;"	f
get_region_detections	monodepth/darknet/src/region_layer.c	/^void get_region_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, float tree_thresh, int relative, detection *dets)$/;"	f
get_regression_values	monodepth/darknet/src/classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_rnn_data	monodepth/darknet/src/rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	monodepth/darknet/src/rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	monodepth/darknet/src/rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_stream_fps	monodepth/darknet/src/image.c	/^int get_stream_fps(CvCapture *cap, int cpp_video_capture)$/;"	f
get_stream_fps_cpp	monodepth/darknet/src/http_stream.cpp	/^int get_stream_fps_cpp(CvCapture *cap) {$/;"	f
get_voc_results_file_template	monodepth/darknet/scripts/reval_voc.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_voc_results_file_template	monodepth/darknet/scripts/reval_voc_py3.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_wall_time	monodepth/darknet/src/demo.c	/^double get_wall_time()$/;"	f
get_webcam_frame	monodepth/darknet/src/http_stream.cpp	/^IplImage* get_webcam_frame(CvCapture *cap) {$/;"	f
get_weights	monodepth/darknet/src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	monodepth/darknet/src/convolutional_layer.c	/^size_t get_workspace_size(layer l){$/;"	f
get_yolo_box	monodepth/darknet/src/yolo_layer.c	/^box get_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride)$/;"	f
get_yolo_detections	monodepth/darknet/src/yolo_layer.c	/^int get_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
getcwd	monodepth/darknet/src/unistd.h	31;"	d
getopt	monodepth/darknet/src/getopt.c	/^getopt (argc, argv, optstring)$/;"	f
gettimeofday	monodepth/darknet/src/gettimeofday.c	/^int gettimeofday(struct timeval *tv, struct timezone *tz)$/;"	f
good_bbox_vec_flags	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bool> good_bbox_vec_flags;$/;"	m	class:Tracker_optflow
gpu_count	monodepth/darknet/src/yolo_v2_class.hpp	/^	const int gpu_count;$/;"	m	class:Tracker_optflow
gpu_id	monodepth/darknet/src/yolo_v2_class.hpp	/^	const int gpu_id;$/;"	m	class:Tracker_optflow
gpu_index	monodepth/darknet/src/cuda.c	/^int gpu_index = 0;$/;"	v
gpu_index	monodepth/darknet/src/network.h	/^    int gpu_index;$/;"	m	struct:network
gradient	monodepth/darknet/src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	monodepth/darknet/src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
gradient_x	monodepth/monodepth_model.py	/^    def gradient_x(self, img):$/;"	m	class:MonodepthModel
gradient_y	monodepth/monodepth_model.py	/^    def gradient_y(self, img):$/;"	m	class:MonodepthModel
grayscale_image	monodepth/darknet/src/image.c	/^image grayscale_image(image im)$/;"	f
group	monodepth/darknet/src/tree.h	/^    int *group;$/;"	m	struct:__anon27
group_offset	monodepth/darknet/src/tree.h	/^    int *group_offset;$/;"	m	struct:__anon27
group_size	monodepth/darknet/src/tree.h	/^    int *group_size;$/;"	m	struct:__anon27
groups	monodepth/darknet/src/layer.h	/^    int groups;$/;"	m	struct:layer
groups	monodepth/darknet/src/tree.h	/^    int groups;$/;"	m	struct:__anon27
gt_depth	monodepth/utils/evaluate_kitti.py	/^        gt_depth = gt_depths[i]$/;"	v
gt_depths	monodepth/utils/evaluate_kitti.py	/^        gt_depths = []$/;"	v
gt_disp	monodepth/utils/evaluate_kitti.py	/^            gt_disp = gt_disparities[i]$/;"	v
gt_disparities	monodepth/utils/evaluate_kitti.py	/^        gt_disparities = load_gt_disp_kitti(args.gt_path)$/;"	v
gun_classifier	monodepth/darknet/src/classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	monodepth/darknet/src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon39
h	monodepth/darknet/src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon43
h	monodepth/darknet/src/data.h	/^    int h;$/;"	m	struct:load_args
h	monodepth/darknet/src/data.h	/^    int w, h;$/;"	m	struct:__anon41
h	monodepth/darknet/src/detector.c	/^	float w, h;$/;"	m	struct:__anon48	file:
h	monodepth/darknet/src/image.h	/^	int h;$/;"	m	struct:__anon32
h	monodepth/darknet/src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
h	monodepth/darknet/src/network.h	/^    int h, w, c;$/;"	m	struct:network
h	monodepth/darknet/src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
h	monodepth/darknet/src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon14::__anon15
h	monodepth/darknet/src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25
h	monodepth/darknet/src/yolo_v2_class.hpp	/^	int h;						\/\/ height$/;"	m	struct:image_t
h	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int x, y, w, h;	\/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
h2	monodepth/darknet/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon14::__anon15
h_cpu	monodepth/darknet/src/layer.h	/^    float *h_cpu;$/;"	m	struct:layer
h_gpu	monodepth/darknet/src/layer.h	/^    float *h_gpu;$/;"	m	struct:layer
ha	monodepth/darknet/src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon14::__anon15
hardtan_activate	monodepth/darknet/src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	monodepth/darknet/src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hasGPU	monodepth/darknet/darknet.py	/^        hasGPU = False$/;"	v
hasGPU	monodepth/darknet/darknet.py	/^hasGPU = True$/;"	v
has_arg	monodepth/darknet/src/getopt.h	/^  int has_arg;$/;"	m	struct:option
hd	monodepth/darknet/src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon14::__anon15
height_in_cfg_file	monodepth/darknet/scripts/gen_anchors.py	/^height_in_cfg_file = 416.$/;"	v
hidden	monodepth/darknet/src/layer.h	/^    int hidden;$/;"	m	struct:layer
hierarchy	monodepth/darknet/src/data.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	monodepth/darknet/src/network.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy_predictions	monodepth/darknet/src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	monodepth/darknet/src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
hold_out_matrix	monodepth/darknet/src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hs	monodepth/darknet/src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon16
hsv_to_rgb	monodepth/darknet/src/image.c	/^void hsv_to_rgb(image im)$/;"	f
hsz	monodepth/darknet/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon22
hue	monodepth/darknet/src/data.h	/^    float hue;$/;"	m	struct:load_args
hue	monodepth/darknet/src/network.h	/^    float hue;$/;"	m	struct:network
hue_image	monodepth/darknet/src/image.c	/^void hue_image(image im, float hue)$/;"	f
huff_ac	monodepth/darknet/src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon14
huff_dc	monodepth/darknet/src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon14
i	monodepth/darknet/depth.py	/^i=1$/;"	v
i	monodepth/darknet/single_depth.py	/^i=1$/;"	v
i	monodepth/darknet/test.py	/^i=1$/;"	v
i	monodepth/darknet/writeToFile2.py	/^i = len([f for f in os.listdir(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/ImagesNormal\/Raw\/") if f[0] != '.'])$/;"	v
i	monodepth/writeToFile.py	/^i = len([f for f in os.listdir(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/Images\/Raw") if f[0] != '.'])$/;"	v
id	monodepth/darknet/src/data.h	/^    int id;$/;"	m	struct:__anon43
id	monodepth/darknet/src/stb_image.h	/^      int id;$/;"	m	struct:__anon14::__anon15
idata	monodepth/darknet/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon20
idct_block_kernel	monodepth/darknet/src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon14
ignore_thresh	monodepth/darknet/src/layer.h	/^	float ignore_thresh;$/;"	m	struct:layer
im	monodepth/darknet/src/data.h	/^    image *im;$/;"	m	struct:load_args
im2col_cpu	monodepth/darknet/src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	monodepth/darknet/src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image	monodepth/darknet/src/image.h	/^} image;$/;"	t	typeref:struct:__anon32
image_data_augmentation	monodepth/darknet/src/http_stream.cpp	/^image image_data_augmentation(IplImage* ipl, int w, int h,$/;"	f
image_distance	monodepth/darknet/src/image.c	/^image image_distance(image a, image b)$/;"	f
image_ids	monodepth/darknet/scripts/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_ids	monodepth/darknet/scripts/voc_label_difficult.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_index	monodepth/darknet/src/detector.c	/^	int image_index;$/;"	m	struct:__anon47	file:
image_path	monodepth/darknet/single_depth.py	/^image_path=r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/image.jpg"$/;"	v
image_t	monodepth/darknet/src/yolo_v2_class.hpp	/^struct image_t {$/;"	s
images	monodepth/darknet/src/demo.c	/^static image images[FRAMES];$/;"	v	file:
images	monodepth/darknet/src/yolo_v2_class.cpp	/^	image images[FRAMES];$/;"	m	struct:detector_gpu_t	file:
img_buffer	monodepth/darknet/src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon9
img_buffer_end	monodepth/darknet/src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon9
img_buffer_original	monodepth/darknet/src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon9
img_buffer_original_end	monodepth/darknet/src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon9
img_comp	monodepth/darknet/src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon14	typeref:struct:__anon14::__anon15
img_h_max	monodepth/darknet/src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon14
img_mcu_h	monodepth/darknet/src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon14
img_mcu_w	monodepth/darknet/src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon14
img_mcu_x	monodepth/darknet/src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon14
img_mcu_y	monodepth/darknet/src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon14
img_n	monodepth/darknet/src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon9
img_name	monodepth/darknet/scripts/get_openimages_dataset.py	/^                    img_name = bbox[0]$/;"	v
img_name	monodepth/darknet/scripts/get_openimages_dataset.py	/^img_name = "111111111111"$/;"	v
img_out_n	monodepth/darknet/src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon9
img_v_max	monodepth/darknet/src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon14
img_x	monodepth/darknet/src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon9
img_y	monodepth/darknet/src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon9
in_img	monodepth/darknet/src/demo.c	/^IplImage* in_img;$/;"	v
in_s	monodepth/darknet/src/demo.c	/^static image in_s ;$/;"	v	file:
increment_layer	monodepth/darknet/src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	monodepth/darknet/src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	monodepth/darknet/src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	monodepth/darknet/src/box.c	/^    int index;$/;"	m	struct:__anon34	file:
index	monodepth/darknet/src/layer.h	/^    int index;$/;"	m	struct:layer
index	monodepth/darknet/src/network.h	/^    int index;$/;"	m	struct:network_state
index	monodepth/darknet/src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
indexes	monodepth/darknet/src/layer.h	/^    int *indexes;$/;"	m	struct:layer
indexes_gpu	monodepth/darknet/src/layer.h	/^    int *indexes_gpu;$/;"	m	struct:layer
init	monodepth/darknet/src/yolo_v2_class.cpp	/^int init(const char *configurationFilename, const char *weightsFilename, int gpu) $/;"	f
inline	monodepth/darknet/src/cuda.h	5;"	d
inline	monodepth/darknet/src/data.h	6;"	d
input	monodepth/darknet/src/network.h	/^    float *input;$/;"	m	struct:network_state
input16_gpu	monodepth/darknet/src/network.h	/^	float **input16_gpu;$/;"	m	struct:network
input_gate_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gpu	monodepth/darknet/src/network.h	/^    float **input_gpu;$/;"	m	struct:network
input_h_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layers	monodepth/darknet/src/layer.h	/^    int   * input_layers;$/;"	m	struct:layer
input_r_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_sizes	monodepth/darknet/src/layer.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_state_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	monodepth/darknet/src/layer.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
inputs	monodepth/darknet/src/layer.h	/^    int inputs;$/;"	m	struct:layer
inputs	monodepth/darknet/src/network.h	/^    int inputs;$/;"	m	struct:network
inputs	monodepth/darknet/src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int_index	monodepth/darknet/src/utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	monodepth/darknet/src/utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	monodepth/darknet/src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
inverted	monodepth/darknet/src/go.c	/^int inverted = 1;$/;"	v
io	monodepth/darknet/src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon9
io_user_data	monodepth/darknet/src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon9
ipl_images	monodepth/darknet/src/demo.c	/^static IplImage* ipl_images[FRAMES];$/;"	v	file:
ipl_to_image	monodepth/darknet/src/image.c	/^image ipl_to_image(IplImage* src)$/;"	f
ipl_to_image	monodepth/darknet/src/yolo_v2_class.hpp	/^	static image_t ipl_to_image(IplImage* src)$/;"	f	class:Detector
isOpened	monodepth/darknet/src/http_stream.cpp	/^	bool isOpened()$/;"	f	class:MJPGWriter
is_fma_avx	monodepth/darknet/src/gemm.c	/^int is_fma_avx() {$/;"	f
is_network	monodepth/darknet/src/parser.c	/^int is_network(section *s)$/;"	f
isatty	monodepth/darknet/src/unistd.h	33;"	d
j	monodepth/darknet/depth.py	/^    j=cv2.imread(g1)$/;"	v
j	monodepth/darknet/single_depth.py	/^j=cv2.imread(image_path)$/;"	v
jfif	monodepth/darknet/src/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon14
jitter	monodepth/darknet/src/data.h	/^    float jitter;$/;"	m	struct:load_args
jitter	monodepth/darknet/src/layer.h	/^    float jitter;$/;"	m	struct:layer
joint	monodepth/darknet/src/layer.h	/^    int joint;$/;"	m	struct:layer
kappa	monodepth/darknet/src/layer.h	/^    float kappa;$/;"	m	struct:layer
key	monodepth/darknet/src/option_list.h	/^    char *key;$/;"	m	struct:__anon49
kf	monodepth/darknet/src/yolo_console_dll.cpp	/^	cv::KalmanFilter kf;$/;"	m	class:track_kalman	file:
kmeans	monodepth/darknet/scripts/gen_anchors.py	/^def kmeans(X,centroids,eps,anchor_file):$/;"	f
kmeans_expectation	monodepth/darknet/scripts/kmeansiou.c	/^int kmeans_expectation(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_maximization	monodepth/darknet/scripts/kmeansiou.c	/^void kmeans_maximization(matrix data, int *assignments, matrix centers)$/;"	f
kvp	monodepth/darknet/src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon49
l1_cpu	monodepth/darknet/src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	monodepth/darknet/src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
label_classifier	monodepth/darknet/src/classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
labels	monodepth/darknet/src/data.h	/^    char **labels;$/;"	m	struct:load_args
last_nonopt	monodepth/darknet/src/getopt.c	/^static int last_nonopt;$/;"	v	file:
last_showed_frames_ago	monodepth/darknet/src/yolo_v2_class.hpp	/^		unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
layer	monodepth/darknet/src/layer.h	/^struct layer{$/;"	s
layer	monodepth/darknet/src/layer.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layers	monodepth/darknet/src/network.h	/^    layer *layers;$/;"	m	struct:network
lbl	sshgui.py	/^lbl = ImageLabel(root)$/;"	v
leaf	monodepth/darknet/src/tree.h	/^    int *leaf;$/;"	m	struct:__anon27
leaky_activate	monodepth/darknet/src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	monodepth/darknet/src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	monodepth/darknet/src/layer.h	/^	float learning_rate;$/;"	m	struct:__anon38
learning_rate	monodepth/darknet/src/network.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate_policy	monodepth/darknet/src/network.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon51
left	monodepth/darknet/src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon43
legal_go	monodepth/darknet/src/go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
length	monodepth/darknet/src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon19
letter_box	monodepth/darknet/src/demo.c	/^static int letter_box = 0;$/;"	v	file:
letterbox_image	monodepth/darknet/darknet.py	/^letterbox_image = lib.letterbox_image$/;"	v
letterbox_image	monodepth/darknet/src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	monodepth/darknet/src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
lflags	monodepth/darknet/src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon25
lhtan_activate	monodepth/darknet/src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	monodepth/darknet/src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
lib	monodepth/darknet/darknet.py	/^            lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	monodepth/darknet/darknet.py	/^            lib = CDLL(winNoGPUdll, RTLD_GLOBAL)$/;"	v
lib	monodepth/darknet/darknet.py	/^        lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	monodepth/darknet/darknet.py	/^    lib = CDLL("\/home\/tanish27bansal\/monodepth\/darknet\/darknet.so", RTLD_GLOBAL)$/;"	v
lib_installed	setup.sh	/^function lib_installed() { \/sbin\/ldconfig -N -v $(sed 's\/:\/ \/' <<< $LD_LIBRARY_PATH) 2>\/dev\/null | grep $1; }$/;"	f
lin_interp	monodepth/utils/evaluation_utils.py	/^def lin_interp(shape, xyd):$/;"	f
line0	monodepth/darknet/src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon16
line1	monodepth/darknet/src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon16
line_size	monodepth/darknet/src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon25
linear_activate	monodepth/darknet/src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	monodepth/darknet/src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linebuf	monodepth/darknet/src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon14::__anon15
lines	monodepth/darknet/scripts/reval_voc.py	/^        lines = f.readlines()$/;"	v
lines	monodepth/darknet/scripts/reval_voc_py3.py	/^        lines = f.readlines()$/;"	v
lines	monodepth/utils/filenames/r.py	/^    lines = [line.split(' ') for line in f]$/;"	v
list	monodepth/darknet/src/list.h	/^typedef struct list{$/;"	s
list	monodepth/darknet/src/list.h	/^} list;$/;"	t	typeref:struct:list
list_file	monodepth/darknet/scripts/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_file	monodepth/darknet/scripts/voc_label_difficult.py	/^    list_file = open('difficult_%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_insert	monodepth/darknet/src/list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	monodepth/darknet/src/list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	monodepth/darknet/src/list.c	/^void **list_to_array(list *l)$/;"	f
load	sshgui.py	/^    def load(self, im):$/;"	m	class:ImageLabel
load_all_cifar10	monodepth/darknet/src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	monodepth/darknet/src/image.c	/^image **load_alphabet()$/;"	f
load_args	monodepth/darknet/src/data.h	/^typedef struct load_args{$/;"	s
load_args	monodepth/darknet/src/data.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_batchnorm_weights	monodepth/darknet/src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	monodepth/darknet/src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	monodepth/darknet/src/data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	monodepth/darknet/src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	monodepth/darknet/src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	monodepth/darknet/src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	monodepth/darknet/src/data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	monodepth/darknet/src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_captcha	monodepth/darknet/src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	monodepth/darknet/src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	monodepth/darknet/src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	monodepth/darknet/src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int classes, int use_flip, float jitter, float hue, float saturation, float exposure, int small_object)$/;"	f
load_data_in_thread	monodepth/darknet/src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	monodepth/darknet/src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	monodepth/darknet/src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	monodepth/darknet/src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	monodepth/darknet/src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	monodepth/darknet/src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	monodepth/darknet/src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_disparity	monodepth/darknet/single_depth.py	/^load_disparity=np.load(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/image_disp.npy")$/;"	v
load_disparity	monodepth/darknet/test.py	/^load_disparity=np.load(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/image_disp.npy")$/;"	v
load_go	monodepth/darknet/src/data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	monodepth/darknet/src/go.c	/^moves load_go_moves(char *filename)$/;"	f
load_gt_disp_kitti	monodepth/utils/evaluation_utils.py	/^def load_gt_disp_kitti(path):$/;"	f
load_image	monodepth/darknet/darknet.py	/^load_image = lib.load_image_color$/;"	v
load_image	monodepth/darknet/src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API image_t Detector::load_image(std::string image_filename)$/;"	f	class:Detector
load_image_augment_paths	monodepth/darknet/src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_image_color	monodepth/darknet/src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	monodepth/darknet/src/image.c	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	monodepth/darknet/src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	monodepth/darknet/src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	monodepth/darknet/src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_image_stb	monodepth/darknet/src/yolo_v2_class.cpp	/^static image load_image_stb(char *filename, int channels)$/;"	f	file:
load_jpeg_image	monodepth/darknet/src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	monodepth/darknet/src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_meta	monodepth/darknet/darknet.py	/^load_meta = lib.get_metadata$/;"	v
load_net	monodepth/darknet/darknet.py	/^load_net = lib.load_network$/;"	v
load_net_custom	monodepth/darknet/darknet.py	/^load_net_custom = lib.load_network_custom$/;"	v
load_network	monodepth/darknet/src/network.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_custom	monodepth/darknet/src/network.c	/^network *load_network_custom(char *cfg, char *weights, int clear, int batch)$/;"	f
load_tags_paths	monodepth/darknet/src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	monodepth/darknet/src/data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	monodepth/darknet/src/data.c	/^void *load_threads(void *ptr)$/;"	f
load_velodyne_points	monodepth/utils/evaluation_utils.py	/^def load_velodyne_points(file_name):$/;"	f
load_weights	monodepth/darknet/src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	monodepth/darknet/src/parser.c	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_layer	monodepth/darknet/src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	monodepth/darknet/src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	monodepth/darknet/src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f
lock	monodepth/darknet/3rdparty/include/pthread.h	/^  void *       lock;$/;"	m	struct:pthread_once_t_
log	monodepth/darknet/src/layer.h	/^    int log;$/;"	m	struct:layer
log_parser	monodepth/darknet/scripts/log_parser/log_parser.py	/^def log_parser(args):$/;"	f
log_rms	monodepth/utils/evaluate_kitti.py	/^    log_rms = np.zeros(num_samples, np.float32)$/;"	v
loggy_activate	monodepth/darknet/src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_gradient	monodepth/darknet/src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	monodepth/darknet/src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_gradient	monodepth/darknet/src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logit	monodepth/darknet/src/region_layer.c	/^float logit(float x)$/;"	f
lpal	monodepth/darknet/src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon25
lseek	monodepth/darknet/src/unistd.h	34;"	d
m	monodepth/darknet/src/data.h	/^    int m;$/;"	m	struct:load_args
m	monodepth/darknet/src/layer.h	/^    float *m;$/;"	m	struct:layer
m_gpu	monodepth/darknet/src/layer.h	/^    float *m_gpu;$/;"	m	struct:layer
ma	monodepth/darknet/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon22
mag_array	monodepth/darknet/src/utils.c	/^float mag_array(float *a, int n)$/;"	f
main	monodepth/darknet/scripts/gen_anchors.py	/^def main(argv):$/;"	f
main	monodepth/darknet/scripts/kmeansiou.c	/^int main(int argc, char *argv[])$/;"	f
main	monodepth/darknet/src/darknet.c	/^int main(int argc, char **argv)$/;"	f
main	monodepth/darknet/src/getopt.c	/^main (argc, argv)$/;"	f
main	monodepth/darknet/src/yolo_console_dll.cpp	/^int main(int argc, char *argv[])$/;"	f
main	monodepth/monodepth_main.py	/^def main(_):$/;"	f
main	monodepth/monodepth_simple.py	/^def main(_):$/;"	f
make_activation_layer	monodepth/darknet/src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	monodepth/darknet/src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	monodepth/darknet/src/connected_layer.c	/^connected_layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	monodepth/darknet/src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	monodepth/darknet/src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.c	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	monodepth/darknet/src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	monodepth/darknet/src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	monodepth/darknet/src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_empty_image	monodepth/darknet/src/yolo_v2_class.hpp	/^	static image_t make_empty_image(int w, int h, int c)$/;"	f	class:Detector
make_gru_layer	monodepth/darknet/src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_image	monodepth/darknet/darknet.py	/^make_image = lib.make_image$/;"	v
make_image	monodepth/darknet/src/image.c	/^image make_image(int w, int h, int c)$/;"	f
make_image_custom	monodepth/darknet/src/yolo_v2_class.hpp	/^	static image_t make_image_custom(int w, int h, int c)$/;"	f	class:Detector
make_labels	monodepth/darknet/data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_list	monodepth/darknet/src/list.c	/^list *make_list()$/;"	f
make_local_layer	monodepth/darknet/src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_matrix	monodepth/darknet/scripts/kmeansiou.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_matrix	monodepth/darknet/src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	monodepth/darknet/src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	monodepth/darknet/src/network.c	/^network make_network(int n)$/;"	f
make_network_boxes	monodepth/darknet/darknet.py	/^make_network_boxes = lib.make_network_boxes$/;"	v
make_network_boxes	monodepth/darknet/src/network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_normalization_layer	monodepth/darknet/src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	monodepth/darknet/src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	monodepth/darknet/src/region_layer.c	/^region_layer make_region_layer(int batch, int w, int h, int n, int classes, int coords, int max_boxes)$/;"	f
make_reorg_layer	monodepth/darknet/src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_reorg_old_layer	monodepth/darknet/src/reorg_old_layer.c	/^layer make_reorg_old_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	monodepth/darknet/src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	monodepth/darknet/src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	monodepth/darknet/src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_upsample_layer	monodepth/darknet/src/upsample_layer.c	/^layer make_upsample_layer(int batch, int w, int h, int c, int stride)$/;"	f
make_widgets	sshgui.py	/^    def make_widgets(self):$/;"	m	class:Application
make_yolo_layer	monodepth/darknet/src/yolo_layer.c	/^layer make_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
makes_safe_go	monodepth/darknet/src/go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	monodepth/darknet/src/utils.c	/^void malloc_error()$/;"	f
map	monodepth/darknet/src/layer.h	/^    int  *map;$/;"	m	struct:layer
marker	monodepth/darknet/src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon14
mask	monodepth/darknet/src/box.h	/^	float *mask;$/;"	m	struct:detection
mask	monodepth/darknet/src/layer.h	/^	int *mask;$/;"	m	struct:layer
mask	monodepth/utils/evaluate_kitti.py	/^                mask = np.logical_and(mask, crop_mask)$/;"	v
mask	monodepth/utils/evaluate_kitti.py	/^            mask = gt_disp > 0$/;"	v
mask	monodepth/utils/evaluate_kitti.py	/^            mask = np.logical_and(gt_depth > args.min_depth, gt_depth < args.max_depth)$/;"	v
mask_scale	monodepth/darknet/src/layer.h	/^	float mask_scale;$/;"	m	struct:layer
master	monodepth/darknet/src/http_stream.cpp	/^	fd_set master;$/;"	m	class:MJPGWriter	file:
mat_obj	monodepth/darknet/src/yolo_v2_class.hpp	/^		cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_resized_obj	monodepth/darknet/src/yolo_v2_class.hpp	/^		cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_to_image	monodepth/darknet/src/yolo_v2_class.hpp	/^	static std::shared_ptr<image_t> mat_to_image(cv::Mat img_src)$/;"	f	class:Detector
mat_to_image_resize	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::shared_ptr<image_t> mat_to_image_resize(cv::Mat mat) const$/;"	f	class:Detector
matrix	monodepth/darknet/scripts/kmeansiou.c	/^typedef struct matrix{$/;"	s	file:
matrix	monodepth/darknet/scripts/kmeansiou.c	/^} matrix;$/;"	t	typeref:struct:matrix	file:
matrix	monodepth/darknet/src/matrix.h	/^typedef struct matrix{$/;"	s
matrix	monodepth/darknet/src/matrix.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix_add_matrix	monodepth/darknet/src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	monodepth/darknet/src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	monodepth/darknet/src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	monodepth/darknet/src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
max_batches	monodepth/darknet/src/network.h	/^    int max_batches;$/;"	m	struct:network
max_boxes	monodepth/darknet/src/layer.h	/^    int max_boxes;$/;"	m	struct:layer
max_crop	monodepth/darknet/src/network.h	/^    int max_crop;$/;"	m	struct:network
max_index	monodepth/darknet/src/utils.c	/^int max_index(float *a, int n)$/;"	f
max_input16_size	monodepth/darknet/src/network.h	/^	size_t *max_input16_size;$/;"	m	struct:network
max_output16_size	monodepth/darknet/src/network.h	/^	size_t *max_output16_size;$/;"	m	struct:network
max_x	monodepth/darknet/src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25
max_y	monodepth/darknet/src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25
maxcode	monodepth/darknet/src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon17
maxcode	monodepth/darknet/src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon13
maxfd	monodepth/darknet/src/http_stream.cpp	/^	SOCKET maxfd;$/;"	m	class:MJPGWriter	file:
maxpool	monodepth/monodepth_model.py	/^    def maxpool(self, x, kernel_size):$/;"	m	class:MonodepthModel
maxpool_layer	monodepth/darknet/src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mb	monodepth/darknet/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon22
mean	monodepth/darknet/src/layer.h	/^    float * mean;$/;"	m	struct:layer
mean_array	monodepth/darknet/src/utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	monodepth/darknet/src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	monodepth/darknet/src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	monodepth/darknet/src/layer.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta_cpu	monodepth/darknet/src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	monodepth/darknet/src/layer.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_gpu	monodepth/darknet/src/layer.h	/^    float * mean_gpu;$/;"	m	struct:layer
meas_size	monodepth/darknet/src/yolo_console_dll.cpp	/^	int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
metaMain	monodepth/darknet/darknet.py	/^metaMain = None$/;"	v
metadata	monodepth/darknet/src/option_list.h	/^} metadata;$/;"	t	typeref:struct:__anon50
mg	monodepth/darknet/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon22
min	monodepth/darknet/src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
min_crop	monodepth/darknet/src/network.h	/^    int min_crop;$/;"	m	struct:network
mode_t	monodepth/darknet/3rdparty/include/semaphore.h	/^typedef unsigned int mode_t;$/;"	t
model	monodepth/darknet/scripts/kmeansiou.c	/^} model;$/;"	t	typeref:struct:__anon6	file:
momentum	monodepth/darknet/src/layer.h	/^	float momentum;$/;"	m	struct:__anon38
momentum	monodepth/darknet/src/network.h	/^    float momentum;$/;"	m	struct:network
monodepth_parameters	monodepth/monodepth_model.py	/^monodepth_parameters = namedtuple('parameters', $/;"	v
move_go	monodepth/darknet/src/go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
moves	monodepth/darknet/src/go.c	/^} moves;$/;"	t	typeref:struct:__anon45	file:
mr	monodepth/darknet/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon22
mse_array	monodepth/darknet/src/utils.c	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	monodepth/darknet/src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	monodepth/darknet/src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
mutex	monodepth/darknet/src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
my_index	monodepth/darknet/src/getopt.c	/^my_index (str, chr)$/;"	f	file:
my_index	monodepth/darknet/src/getopt.c	202;"	d	file:
n	monodepth/darknet/src/data.h	/^    int n;$/;"	m	struct:load_args
n	monodepth/darknet/src/go.c	/^    int n;$/;"	m	struct:__anon45	file:
n	monodepth/darknet/src/layer.h	/^    int n;$/;"	m	struct:layer
n	monodepth/darknet/src/network.h	/^    int n;$/;"	m	struct:network
n	monodepth/darknet/src/tree.h	/^    int n;$/;"	m	struct:__anon27
name	monodepth/darknet/src/getopt.h	/^  const char *name;$/;"	m	struct:option
name	monodepth/darknet/src/tree.h	/^    char **name;$/;"	m	struct:__anon27
names	monodepth/darknet/src/option_list.h	/^	char **names;$/;"	m	struct:__anon50
net	monodepth/darknet/src/compare.c	/^    network net;$/;"	m	struct:__anon31	file:
net	monodepth/darknet/src/demo.c	/^static network net;$/;"	v	file:
net	monodepth/darknet/src/network.h	/^    network net;$/;"	m	struct:network_state
net	monodepth/darknet/src/parser.c	/^    network net;$/;"	m	struct:size_params	file:
net	monodepth/darknet/src/yolo_v2_class.cpp	/^	network net;$/;"	m	struct:detector_gpu_t	file:
netMain	monodepth/darknet/darknet.py	/^netMain = None$/;"	v
network	monodepth/darknet/src/network.h	/^typedef struct network{$/;"	s
network	monodepth/darknet/src/network.h	/^} network;$/;"	t	typeref:struct:network
network_accuracies	monodepth/darknet/src/network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	monodepth/darknet/src/network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	monodepth/darknet/src/network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_height	monodepth/darknet/src/network.c	/^int network_height(network *net) { return net->h; }$/;"	f
network_predict	monodepth/darknet/darknet.py	/^network_predict = lib.network_predict$/;"	v
network_predict	monodepth/darknet/src/network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	monodepth/darknet/src/network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	monodepth/darknet/src/network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_image	monodepth/darknet/src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_state	monodepth/darknet/src/network.h	/^typedef struct network_state {$/;"	s
network_state	monodepth/darknet/src/network.h	/^} network_state;$/;"	t	typeref:struct:network_state
network_width	monodepth/darknet/src/network.c	/^int network_width(network *net) { return net->w; }$/;"	f
new	monodepth/darknet/depth.py	/^        new=cv2.putText(j,"COLLISION WARNING!",(310,30),cv2.FONT_HERSHEY_COMPLEX_SMALL,1.5,(0,0,256))$/;"	v
new	monodepth/darknet/depth.py	/^        new=cv2.putText(j,yy[c][0]+"="+str(car),(50,30*(c+1)),cv2.FONT_HERSHEY_TRIPLEX,.8,(0,255,255))$/;"	v
new	monodepth/darknet/depth.py	/^    new=j$/;"	v
new	monodepth/darknet/single_depth.py	/^    new=cv2.putText(j,"COLLISION WARNING!",(310,30),cv2.FONT_HERSHEY_COMPLEX_SMALL,1.5,(0,0,256))$/;"	v
new	monodepth/darknet/single_depth.py	/^    new=cv2.putText(j,yy[c][0]+"="+str(car),(50,30*(c+1)),cv2.FONT_HERSHEY_TRIPLEX,.8,(0,255,255))$/;"	v
new	monodepth/darknet/single_depth.py	/^new=j$/;"	v
new_result	monodepth/darknet/src/yolo_console_dll.cpp	/^	void new_result(std::vector<bbox_t> new_result_vec, float new_time) {$/;"	f	class:extrapolate_coords_t
next	monodepth/darknet/src/list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
next_frame	sshgui.py	/^    def next_frame(self):$/;"	m	class:ImageLabel
nextchar	monodepth/darknet/src/getopt.c	/^static char *nextchar;$/;"	v	file:
nh	monodepth/darknet/src/data.h	/^    int nh;$/;"	m	struct:load_args
nind	monodepth/darknet/src/go.c	14;"	d	file:
nms	monodepth/darknet/src/yolo_v2_class.hpp	/^	float nms = .4;$/;"	m	class:Detector
nms_comparator	monodepth/darknet/src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nms_comparator_v3	monodepth/darknet/src/box.c	/^int nms_comparator_v3(const void *pa, const void *pb)$/;"	f
no_argument	monodepth/darknet/src/getopt.h	97;"	d
noadjust	monodepth/darknet/src/layer.h	/^    int noadjust;$/;"	m	struct:layer
node	monodepth/darknet/src/list.h	/^typedef struct node{$/;"	s
node	monodepth/darknet/src/list.h	/^} node;$/;"	t	typeref:struct:node
noi	monodepth/darknet/src/go.c	/^int noi = 1;$/;"	v
nomore	monodepth/darknet/src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon14
nonoption_flags_len	monodepth/darknet/src/getopt.c	/^static int nonoption_flags_len;$/;"	v	file:
nonoption_flags_max_len	monodepth/darknet/src/getopt.c	/^static int nonoption_flags_max_len;$/;"	v	file:
noobject_scale	monodepth/darknet/src/layer.h	/^    float noobject_scale;$/;"	m	struct:layer
normDstTensorDesc	monodepth/darknet/src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normDstTensorDescF16	monodepth/darknet/src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normTensorDesc	monodepth/darknet/src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normalize_array	monodepth/darknet/src/utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	monodepth/darknet/src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	monodepth/darknet/src/data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	monodepth/darknet/src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	monodepth/darknet/src/image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	monodepth/darknet/src/image.c	/^void normalize_image2(image p)$/;"	f
normalize_layer	monodepth/darknet/src/darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	monodepth/darknet/src/darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
norms	monodepth/darknet/src/layer.h	/^    float * norms;$/;"	m	struct:layer
norms_gpu	monodepth/darknet/src/layer.h	/^    float * norms_gpu;$/;"	m	struct:layer
num_bits	monodepth/darknet/src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon18
num_boxes	monodepth/darknet/src/data.h	/^    int *num_boxes;$/;"	m	struct:__anon41
num_boxes	monodepth/darknet/src/data.h	/^    int num_boxes;$/;"	m	struct:load_args
num_channels	monodepth/darknet/src/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon11
num_detections	monodepth/darknet/src/network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_samples	monodepth/utils/evaluate_kitti.py	/^        num_samples = 200$/;"	v
num_samples	monodepth/utils/evaluate_kitti.py	/^        num_samples = 697$/;"	v
num_steps	monodepth/darknet/src/network.h	/^    int num_steps;$/;"	m	struct:network
num_test	monodepth/utils/evaluate_kitti.py	/^        num_test = len(im_files)$/;"	v
nw	monodepth/darknet/src/data.h	/^    int nw;$/;"	m	struct:load_args
obj	monodepth/darknet/3rdparty/include/pthread.h	/^          void    *       obj;$/;"	m	class:PThreadCleanup
obj_id	monodepth/darknet/src/yolo_v2_class.hpp	/^		unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
obj_id	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int obj_id;		\/\/ class of object - from range [0, classes-1]$/;"	m	struct:bbox_t
obj_id_to_color	monodepth/darknet/src/yolo_v2_class.hpp	/^static cv::Scalar obj_id_to_color(int obj_id) {$/;"	f
object_scale	monodepth/darknet/src/layer.h	/^    float object_scale;$/;"	m	struct:layer
objectness	monodepth/darknet/src/box.h	/^	float objectness;$/;"	m	struct:detection
objectness	monodepth/darknet/src/layer.h	/^    int objectness;$/;"	m	struct:layer
objects_names_from_file	monodepth/darknet/src/yolo_console_dll.cpp	/^std::vector<std::string> objects_names_from_file(std::string const filename) {$/;"	f
offset	monodepth/darknet/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon22
old_dx_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<float> old_dx_vec, old_dy_vec;$/;"	m	class:extrapolate_coords_t	file:
old_dy_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<float> old_dx_vec, old_dy_vec;$/;"	m	class:extrapolate_coords_t	file:
old_out	monodepth/darknet/src/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon25
old_result_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<bbox_t> old_result_vec;$/;"	m	class:extrapolate_coords_t	file:
one_hot_encode	monodepth/darknet/src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
one_off_detections	monodepth/darknet/src/yolo_v2_class.hpp	/^	bool const one_off_detections;$/;"	m	class:preview_boxes_t
oneoff	monodepth/darknet/src/darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
onlyforward	monodepth/darknet/src/layer.h	/^    int onlyforward;$/;"	m	struct:layer
open	monodepth/darknet/src/http_stream.cpp	/^	bool open(int port)$/;"	f	class:MJPGWriter
operations	monodepth/darknet/src/darknet.c	/^void operations(char *cfgfile)$/;"	f
optarg	monodepth/darknet/src/getopt.c	/^char *optarg;$/;"	v
opterr	monodepth/darknet/src/getopt.c	/^int opterr = 1;$/;"	v
optimize_picture	monodepth/darknet/src/nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
optind	monodepth/darknet/src/getopt.c	/^int optind = 1;$/;"	v
option	monodepth/darknet/src/getopt.h	/^struct option$/;"	s
option_find	monodepth/darknet/src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	monodepth/darknet/src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	monodepth/darknet/src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	monodepth/darknet/src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	monodepth/darknet/src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	monodepth/darknet/src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	monodepth/darknet/src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	monodepth/darknet/src/option_list.c	/^void option_unused(list *l)$/;"	f
optional_argument	monodepth/darknet/src/getopt.h	99;"	d
options	monodepth/darknet/src/parser.c	/^    list *options;$/;"	m	struct:__anon26	file:
optopt	monodepth/darknet/src/getopt.c	/^int optopt = '?';$/;"	v
order	monodepth/darknet/src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon14
ordering	monodepth/darknet/src/getopt.c	/^} ordering;$/;"	v	typeref:enum:__anon30	file:
out	monodepth/darknet/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon20
out	monodepth/darknet/src/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon25
out_c	monodepth/darknet/src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_file	monodepth/darknet/scripts/get_openimages_dataset.py	/^                    out_file = open("destination_path\\\\%s.txt"%bbox[0], 'w')$/;"	v
out_h	monodepth/darknet/src/data.h	/^    int out_h;$/;"	m	struct:load_args
out_h	monodepth/darknet/src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	monodepth/darknet/src/data.h	/^	int out_w;$/;"	m	struct:load_args
out_w	monodepth/darknet/src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
output	monodepth/darknet/src/layer.h	/^    float * output;$/;"	m	struct:layer
output	monodepth/darknet/src/network.h	/^    float *output;$/;"	m	struct:network
output	monodepth/utils/filenames/r.py	/^output = open("list2(sorted).txt", 'w')$/;"	v
output16_gpu	monodepth/darknet/src/network.h	/^	float **output16_gpu;$/;"	m	struct:network
output_dir	monodepth/darknet/scripts/reval_voc.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_dir	monodepth/darknet/scripts/reval_voc_py3.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_gpu	monodepth/darknet/src/layer.h	/^    float * output_gpu;$/;"	m	struct:layer
output_layer	monodepth/darknet/src/layer.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
outputs	monodepth/darknet/src/layer.h	/^    int outputs;$/;"	m	struct:layer
outputs	monodepth/darknet/src/network.h	/^    int outputs;$/;"	m	struct:network
overlap	monodepth/darknet/src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
p	monodepth/darknet/3rdparty/include/pthread.h	/^    void * p;                   \/* Pointer to actual object *\/$/;"	m	struct:__anon2
p	monodepth/darknet/depth.py	/^            p=f.tell() $/;"	v
p	monodepth/darknet/src/detector.c	/^	float p;$/;"	m	struct:__anon47	file:
pad	monodepth/darknet/src/layer.h	/^    int pad;$/;"	m	struct:layer
pal	monodepth/darknet/src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon25
parent	monodepth/darknet/src/tree.h	/^    int *parent;$/;"	m	struct:__anon27
parse	monodepth/darknet/src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25
parse_activation	monodepth/darknet/src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_args	monodepth/darknet/scripts/log_parser/log_parser.py	/^def parse_args():$/;"	f
parse_args	monodepth/darknet/scripts/reval_voc.py	/^def parse_args():$/;"	f
parse_args	monodepth/darknet/scripts/reval_voc_py3.py	/^def parse_args():$/;"	f
parse_avgpool	monodepth/darknet/src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	monodepth/darknet/src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	monodepth/darknet/src/parser.c	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	monodepth/darknet/src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	monodepth/darknet/src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	monodepth/darknet/src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	monodepth/darknet/src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	monodepth/darknet/src/utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	monodepth/darknet/src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	monodepth/darknet/src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	monodepth/darknet/src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	monodepth/darknet/scripts/kmeansiou.c	/^double *parse_fields(char *l, int n)$/;"	f
parse_fields	monodepth/darknet/src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	monodepth/darknet/src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	monodepth/darknet/src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_maxpool	monodepth/darknet/src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	monodepth/darknet/src/parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	monodepth/darknet/src/parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_network_cfg_custom	monodepth/darknet/src/parser.c	/^network parse_network_cfg_custom(char *filename, int batch)$/;"	f
parse_normalization	monodepth/darknet/src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_rec	monodepth/darknet/scripts/voc_eval.py	/^def parse_rec(filename):$/;"	f
parse_rec	monodepth/darknet/scripts/voc_eval_py3.py	/^def parse_rec(filename):$/;"	f
parse_region	monodepth/darknet/src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	monodepth/darknet/src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_reorg_old	monodepth/darknet/src/parser.c	/^layer parse_reorg_old(list *options, size_params params)$/;"	f
parse_rnn	monodepth/darknet/src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	monodepth/darknet/src/parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	monodepth/darknet/src/parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	monodepth/darknet/src/parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	monodepth/darknet/src/parser.c	/^layer parse_upsample(list *options, size_params params, network net)$/;"	f
parse_yolo	monodepth/darknet/src/parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	monodepth/darknet/src/parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
parser	monodepth/monodepth_main.py	/^parser = argparse.ArgumentParser(description='Monodepth TensorFlow implementation.')$/;"	v
parser	monodepth/monodepth_simple.py	/^parser = argparse.ArgumentParser(description='Monodepth TensorFlow implementation.')$/;"	v
parser	monodepth/utils/evaluate_kitti.py	/^parser = argparse.ArgumentParser(description='Evaluation on the KITTI dataset')$/;"	v
partial	monodepth/darknet/src/darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
path	monodepth/darknet/src/data.h	/^    char *path;$/;"	m	struct:load_args
paths	monodepth/darknet/src/data.h	/^    char **paths;$/;"	m	struct:load_args
performDetect	monodepth/darknet/darknet.py	/^def performDetect(imagePath="data\/dog.jpg", thresh= 0.25, configPath = ".\/cfg\/yolov3.cfg", weightPath = "yolov3.weights", metaPath= ".\/cfg\/coco.data", showImage= True, makeImageOnly = True, initOnly= False):$/;"	f
pid_t	monodepth/darknet/3rdparty/include/sched.h	/^   typedef int pid_t;$/;"	t
pid_t	monodepth/darknet/3rdparty/include/sched.h	/^ typedef int pid_t;$/;"	t
plse_activate	monodepth/darknet/src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	monodepth/darknet/src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	monodepth/darknet/src/utils.c	/^void pm(int M, int N, float *A)$/;"	f
policy	monodepth/darknet/src/network.h	/^    learning_rate_policy policy;$/;"	m	struct:network
pop_column	monodepth/darknet/src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
posixly_correct	monodepth/darknet/src/getopt.c	/^static char *posixly_correct;$/;"	v	file:
post_process_disparity	monodepth/monodepth_main.py	/^def post_process_disparity(disp):$/;"	f
post_process_disparity	monodepth/monodepth_simple.py	/^def post_process_disparity(disp):$/;"	f
pow_cpu	monodepth/darknet/src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	monodepth/darknet/src/network.h	/^    float power;$/;"	m	struct:network
pred_depth	monodepth/utils/evaluate_kitti.py	/^        pred_depth = pred_depths[i]$/;"	v
pred_depths	monodepth/utils/evaluate_kitti.py	/^        pred_depths = []$/;"	v
pred_disp	monodepth/utils/evaluate_kitti.py	/^            pred_disp = pred_disparities_resized[i]$/;"	v
pred_disparities	monodepth/utils/evaluate_kitti.py	/^    pred_disparities = np.load(args.predicted_disp_path)$/;"	v
predict	monodepth/darknet/darknet.py	/^predict = lib.network_predict$/;"	v
predict	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<bbox_t> predict() {$/;"	f	class:track_kalman
predict	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<bbox_t> predict(float cur_time) {$/;"	f	class:extrapolate_coords_t
predict_classifier	monodepth/darknet/src/classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_image	monodepth/darknet/darknet.py	/^predict_image = lib.network_predict_image$/;"	v
predict_move	monodepth/darknet/src/go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
predictions	monodepth/darknet/src/demo.c	/^static float *predictions[FRAMES];$/;"	v	file:
predictions	monodepth/darknet/src/yolo_v2_class.cpp	/^	float *predictions[FRAMES];$/;"	m	struct:detector_gpu_t	file:
prefix	monodepth/darknet/src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon24
prev	monodepth/darknet/3rdparty/include/pthread.h	/^  struct ptw32_cleanup_t *prev;$/;"	m	struct:ptw32_cleanup_t	typeref:struct:ptw32_cleanup_t::ptw32_cleanup_t
prev	monodepth/darknet/src/list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_bbox_vec_deque	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::deque<std::vector<bbox_t>> prev_bbox_vec_deque;$/;"	m	class:Detector
prev_pts_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
prev_pts_flow_cpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat prev_pts_flow_cpu;$/;"	m	class:Tracker_optflow
prev_pts_flow_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
prev_state	monodepth/darknet/src/layer.h	/^    float *prev_state;$/;"	m	struct:layer
prev_state_gpu	monodepth/darknet/src/layer.h	/^    float * prev_state_gpu;$/;"	m	struct:layer
preview_box_size	monodepth/darknet/src/yolo_v2_class.hpp	/^	size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
preview_box_track_id	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<preview_box_track_t> preview_box_track_id;$/;"	m	class:preview_boxes_t
preview_box_track_t	monodepth/darknet/src/yolo_v2_class.hpp	/^		preview_box_track_t() : track_id(0), obj_id(0), last_showed_frames_ago(frames_history), current_detection(false) {}$/;"	f	struct:preview_boxes_t::preview_box_track_t
preview_box_track_t	monodepth/darknet/src/yolo_v2_class.hpp	/^	struct preview_box_track_t {$/;"	s	class:preview_boxes_t
preview_boxes_t	monodepth/darknet/src/yolo_v2_class.hpp	/^	preview_boxes_t(size_t _preview_box_size = 100, size_t _bottom_offset = 100, bool _one_off_detections = false) :$/;"	f	class:preview_boxes_t
preview_boxes_t	monodepth/darknet/src/yolo_v2_class.hpp	/^class preview_boxes_t {$/;"	c
print_board	monodepth/darknet/src/go.c	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	monodepth/darknet/src/coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_cocos	monodepth/darknet/src/detector.c	/^static void print_cocos(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detector_detections	monodepth/darknet/src/detector.c	/^void print_detector_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_image	monodepth/darknet/src/image.c	/^void print_image(image m)$/;"	f
print_imagenet_detections	monodepth/darknet/src/detector.c	/^void print_imagenet_detections(FILE *fp, int id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_letters	monodepth/darknet/src/data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	monodepth/darknet/src/matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	monodepth/darknet/src/network.c	/^void print_network(network net)$/;"	f
print_statistics	monodepth/darknet/src/utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	monodepth/darknet/src/rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	monodepth/darknet/src/yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
prob	monodepth/darknet/src/box.h	/^	float *prob;$/;"	m	struct:detection
prob	monodepth/darknet/src/yolo_v2_class.hpp	/^	float prob;					\/\/ confidence - probability that the object was found correctly$/;"	m	struct:bbox_t
probability	monodepth/darknet/src/layer.h	/^    float probability;$/;"	m	struct:layer
probs	monodepth/darknet/src/box.c	/^    float **probs;$/;"	m	struct:__anon34	file:
probs	monodepth/darknet/src/demo.c	/^static float **probs;$/;"	v	file:
progressive	monodepth/darknet/src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon14
propagate_liberty	monodepth/darknet/src/go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
pthread_attr_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_attr_t_ * pthread_attr_t;$/;"	t	typeref:struct:pthread_attr_t_
pthread_barrier_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_barrier_t_ * pthread_barrier_t;$/;"	t	typeref:struct:pthread_barrier_t_
pthread_barrierattr_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_barrierattr_t_ * pthread_barrierattr_t;$/;"	t	typeref:struct:pthread_barrierattr_t_
pthread_cleanup_pop	monodepth/darknet/3rdparty/include/pthread.h	763;"	d
pthread_cleanup_pop	monodepth/darknet/3rdparty/include/pthread.h	788;"	d
pthread_cleanup_pop	monodepth/darknet/3rdparty/include/pthread.h	866;"	d
pthread_cleanup_push	monodepth/darknet/3rdparty/include/pthread.h	754;"	d
pthread_cleanup_push	monodepth/darknet/3rdparty/include/pthread.h	782;"	d
pthread_cleanup_push	monodepth/darknet/3rdparty/include/pthread.h	861;"	d
pthread_cond_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_cond_t_ * pthread_cond_t;$/;"	t	typeref:struct:pthread_cond_t_
pthread_condattr_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_condattr_t_ * pthread_condattr_t;$/;"	t	typeref:struct:pthread_condattr_t_
pthread_key_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_key_t_ * pthread_key_t;$/;"	t	typeref:struct:pthread_key_t_
pthread_mutex_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_mutex_t_ * pthread_mutex_t;$/;"	t	typeref:struct:pthread_mutex_t_
pthread_mutexattr_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_mutexattr_t_ * pthread_mutexattr_t;$/;"	t	typeref:struct:pthread_mutexattr_t_
pthread_once_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_once_t_ pthread_once_t;$/;"	t	typeref:struct:pthread_once_t_
pthread_once_t_	monodepth/darknet/3rdparty/include/pthread.h	/^struct pthread_once_t_$/;"	s
pthread_rwlock_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_rwlock_t_ * pthread_rwlock_t;$/;"	t	typeref:struct:pthread_rwlock_t_
pthread_rwlockattr_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_rwlockattr_t_ * pthread_rwlockattr_t;$/;"	t	typeref:struct:pthread_rwlockattr_t_
pthread_spinlock_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct pthread_spinlock_t_ * pthread_spinlock_t;$/;"	t	typeref:struct:pthread_spinlock_t_
pthread_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef ptw32_handle_t pthread_t;$/;"	t
ptw32_cleanup_callback_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef void (* PTW32_CDECL ptw32_cleanup_callback_t)(void *);$/;"	t
ptw32_cleanup_t	monodepth/darknet/3rdparty/include/pthread.h	/^struct ptw32_cleanup_t$/;"	s
ptw32_cleanup_t	monodepth/darknet/3rdparty/include/pthread.h	/^typedef struct ptw32_cleanup_t ptw32_cleanup_t;$/;"	t	typeref:struct:ptw32_cleanup_t
ptw32_exception	monodepth/darknet/3rdparty/include/pthread.h	/^class ptw32_exception {};$/;"	c
ptw32_exception_cancel	monodepth/darknet/3rdparty/include/pthread.h	/^class ptw32_exception_cancel : public ptw32_exception {};$/;"	c
ptw32_exception_exit	monodepth/darknet/3rdparty/include/pthread.h	/^class ptw32_exception_exit   : public ptw32_exception {};$/;"	c
ptw32_features	monodepth/darknet/3rdparty/include/pthread.h	/^enum ptw32_features {$/;"	g
ptw32_handle_t	monodepth/darknet/3rdparty/include/pthread.h	/^} ptw32_handle_t;$/;"	t	typeref:struct:__anon2
pull_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	monodepth/darknet/src/connected_layer.c	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_cost_layer	monodepth/darknet/src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	monodepth/darknet/src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	monodepth/darknet/src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	monodepth/darknet/src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	monodepth/darknet/src/connected_layer.c	/^void push_connected_layer(connected_layer l)$/;"	f
push_cost_layer	monodepth/darknet/src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	monodepth/darknet/src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	monodepth/darknet/src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
q	monodepth/darknet/depth.py	/^q=1$/;"	v
q	monodepth/darknet/single_depth.py	/^q=1$/;"	v
q	monodepth/darknet/test.py	/^q=1$/;"	v
qe	monodepth/darknet/depth.py	/^qe = len([f for f in os.listdir(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/ImagesNormal\/Raw\/") if f[0] != '.'])$/;"	v
quality	monodepth/darknet/src/http_stream.cpp	/^	int quality; \/\/ jpeg compression [1..100]$/;"	m	class:MJPGWriter	file:
r	monodepth/darknet/depth.py	/^    r=open(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/ultimate2.txt","w")$/;"	v
r1	monodepth/darknet/depth.py	/^    r1=open(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/ultimate2.txt","r")$/;"	v
r_cpu	monodepth/darknet/src/layer.h	/^    float *r_cpu;$/;"	m	struct:layer
r_gpu	monodepth/darknet/src/layer.h	/^    float *r_gpu;$/;"	m	struct:layer
ramp_activate	monodepth/darknet/src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	monodepth/darknet/src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
rand	monodepth/darknet/src/layer.h	/^    float *rand;$/;"	m	struct:layer
rand_gpu	monodepth/darknet/src/layer.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	monodepth/darknet/src/utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	monodepth/darknet/src/utils.c	/^float rand_normal()$/;"	f
rand_scale	monodepth/darknet/src/utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	monodepth/darknet/src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	monodepth/darknet/src/utils.c	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_strong	monodepth/darknet/src/utils.c	/^float rand_uniform_strong(float min, float max)$/;"	f
random	monodepth/darknet/src/layer.h	/^    int random;$/;"	m	struct:layer
random	monodepth/darknet/src/unistd.h	16;"	d
random_augment_image	monodepth/darknet/src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_centers	monodepth/darknet/scripts/kmeansiou.c	/^void random_centers(matrix data, matrix centers){$/;"	f
random_crop_image	monodepth/darknet/src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	monodepth/darknet/src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_float	monodepth/darknet/src/utils.c	/^float random_float()$/;"	f
random_gen	monodepth/darknet/src/utils.c	/^unsigned int random_gen()$/;"	f
random_go_moves	monodepth/darknet/src/go.c	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_matrix	monodepth/darknet/src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	monodepth/darknet/src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	monodepth/darknet/src/data.c	/^void randomize_data(data d)$/;"	f
ratio	monodepth/darknet/src/layer.h	/^    float ratio;$/;"	m	struct:layer
ratio	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
raw_coeff	monodepth/darknet/src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon14::__anon15
raw_data	monodepth/darknet/src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon14::__anon15
read	monodepth/darknet/src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon8
read_all	monodepth/darknet/src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	monodepth/darknet/src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	monodepth/darknet/src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_calib_file	monodepth/utils/evaluation_utils.py	/^def read_calib_file(path):$/;"	f
read_cfg	monodepth/darknet/src/parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	monodepth/darknet/src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_file_data	monodepth/utils/evaluation_utils.py	/^def read_file_data(files, data_root):$/;"	f
read_from_callbacks	monodepth/darknet/src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon9
read_image	monodepth/monodepth_dataloader.py	/^    def read_image(self, image_path):$/;"	m	class:MonodepthDataloader
read_int	monodepth/darknet/src/utils.c	/^int read_int(int fd)$/;"	f
read_map	monodepth/darknet/src/utils.c	/^int *read_map(char *filename)$/;"	f
read_option	monodepth/darknet/src/option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_text_lines	monodepth/utils/evaluation_utils.py	/^def read_text_lines(file_path):$/;"	f
read_tokenized_data	monodepth/darknet/src/rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	monodepth/darknet/src/rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	monodepth/darknet/src/tree.c	/^tree *read_tree(char *filename)$/;"	f
reconstruct_picture	monodepth/darknet/src/nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
region_layer	monodepth/darknet/src/region_layer.h	/^typedef layer region_layer;$/;"	t
release	monodepth/darknet/src/http_stream.cpp	/^	bool release()$/;"	f	class:MJPGWriter
relie_activate	monodepth/darknet/src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	monodepth/darknet/src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	monodepth/darknet/src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	monodepth/darknet/src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
remove_connected	monodepth/darknet/src/go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
reorg	monodepth/darknet/src/layer.h	/^    int reorg;$/;"	m	struct:layer
reorg_cpu	monodepth/darknet/src/blas.c	/^void reorg_cpu(float *x, int out_w, int out_h, int out_c, int batch, int stride, int forward, float *out)$/;"	f
replace_image_to_label	monodepth/darknet/src/utils.c	/^void replace_image_to_label(char *input_path, char *output_path) {$/;"	f
required_argument	monodepth/darknet/src/getopt.h	98;"	d
resample	monodepth/darknet/src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon16
resample_row_1	monodepth/darknet/src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	monodepth/darknet/src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	monodepth/darknet/src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon14
resblock	monodepth/monodepth_model.py	/^    def resblock(self, x, num_layers, num_blocks):$/;"	m	class:MonodepthModel
rescale_net	monodepth/darknet/src/darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	monodepth/darknet/src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
resconv	monodepth/monodepth_model.py	/^    def resconv(self, x, num_layers, stride):$/;"	m	class:MonodepthModel
rescore	monodepth/darknet/src/layer.h	/^    int rescore;$/;"	m	struct:layer
reserved1	monodepth/darknet/3rdparty/include/pthread.h	/^  int          reserved1;$/;"	m	struct:pthread_once_t_
reserved2	monodepth/darknet/3rdparty/include/pthread.h	/^  int          reserved2;$/;"	m	struct:pthread_once_t_
reset_momentum	monodepth/darknet/src/network.c	/^void reset_momentum(network net)$/;"	f
reset_network_state	monodepth/darknet/src/network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_normalize_net	monodepth/darknet/src/darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn	monodepth/darknet/darknet.py	/^reset_rnn = lib.reset_rnn$/;"	v
reset_rnn	monodepth/darknet/src/network.c	/^void reset_rnn(network *net)$/;"	f
reset_rnn_state	monodepth/darknet/src/rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f
resize_avgpool_layer	monodepth/darknet/src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	monodepth/darknet/src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	monodepth/darknet/src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	monodepth/darknet/src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	monodepth/darknet/src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	monodepth/darknet/src/image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	monodepth/darknet/src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	monodepth/darknet/src/image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	monodepth/darknet/src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	monodepth/darknet/src/image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	monodepth/darknet/src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	monodepth/darknet/src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	monodepth/darknet/src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	monodepth/darknet/src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_reorg_old_layer	monodepth/darknet/src/reorg_old_layer.c	/^void resize_reorg_old_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	monodepth/darknet/src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resize_shortcut_layer	monodepth/darknet/src/shortcut_layer.c	/^void resize_shortcut_layer(layer *l, int w, int h)$/;"	f
resize_upsample_layer	monodepth/darknet/src/upsample_layer.c	/^void resize_upsample_layer(layer *l, int w, int h)$/;"	f
resize_yolo_layer	monodepth/darknet/src/yolo_layer.c	/^void resize_yolo_layer(layer *l, int w, int h)$/;"	f
resized	monodepth/darknet/src/data.h	/^    image *resized;$/;"	m	struct:load_args
restart_interval	monodepth/darknet/src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon14
reverse	monodepth/darknet/src/layer.h	/^    int reverse;$/;"	m	struct:layer
rgb	monodepth/darknet/src/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon14
rgb_to_hsv	monodepth/darknet/src/image.c	/^void rgb_to_hsv(image im)$/;"	f
rgbgr_image	monodepth/darknet/darknet.py	/^rgbgr_image = lib.rgbgr_image$/;"	v
rgbgr_image	monodepth/darknet/src/image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	monodepth/darknet/src/darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	monodepth/darknet/src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
right	monodepth/darknet/src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon43
rms	monodepth/utils/evaluate_kitti.py	/^    rms     = np.zeros(num_samples, np.float32)$/;"	v
rolling_mean	monodepth/darknet/src/layer.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean_gpu	monodepth/darknet/src/layer.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	monodepth/darknet/src/layer.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance_gpu	monodepth/darknet/src/layer.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
root	sshgui.py	/^root = tk.Tk()$/;"	v
rotate_crop_image	monodepth/darknet/src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	monodepth/darknet/src/image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	monodepth/darknet/src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f
route_layer	monodepth/darknet/src/route_layer.h	/^typedef layer route_layer;$/;"	t
routine	monodepth/darknet/3rdparty/include/pthread.h	/^  ptw32_cleanup_callback_t routine;$/;"	m	struct:ptw32_cleanup_t
rows	monodepth/darknet/scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
rows	monodepth/darknet/src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
run_art	monodepth/darknet/src/art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	monodepth/darknet/src/captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	monodepth/darknet/src/rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	monodepth/darknet/src/cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	monodepth/darknet/src/classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	monodepth/darknet/src/coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	monodepth/darknet/src/compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detector	monodepth/darknet/src/detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	monodepth/darknet/src/dice.c	/^void run_dice(int argc, char **argv)$/;"	f
run_go	monodepth/darknet/src/go.c	/^void run_go(int argc, char **argv)$/;"	f
run_nightmare	monodepth/darknet/src/nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_super	monodepth/darknet/src/super.c	/^void run_super(int argc, char **argv)$/;"	f
run_swag	monodepth/darknet/src/swag.c	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	monodepth/darknet/src/tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_vid_rnn	monodepth/darknet/src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	monodepth/darknet/src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	monodepth/darknet/src/voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	monodepth/darknet/src/writing.c	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	monodepth/darknet/src/yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
s	monodepth/darknet/depth.py	/^    s=p+1    $/;"	v
s	monodepth/darknet/depth.py	/^s=0$/;"	v
s	monodepth/darknet/single_depth.py	/^s=0$/;"	v
s	monodepth/darknet/src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon14
s	monodepth/darknet/src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon20
s	monodepth/darknet/test.py	/^s=0$/;"	v
sample	monodepth/darknet/darknet.py	/^def sample(probs):$/;"	f
sample	monodepth/darknet/scripts/kmeansiou.c	/^int *sample(int n)$/;"	f
sample_array	monodepth/darknet/src/utils.c	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	monodepth/darknet/src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	monodepth/darknet/src/image.c	/^void saturate_image(image im, float sat)$/;"	f
saturation	monodepth/darknet/src/data.h	/^    float saturation;$/;"	m	struct:load_args
saturation	monodepth/darknet/src/layer.h	/^    float saturation;$/;"	m	struct:layer
saturation	monodepth/darknet/src/network.h	/^    float saturation;$/;"	m	struct:network
save_batchnorm_weights	monodepth/darknet/src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	monodepth/darknet/src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	monodepth/darknet/src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	monodepth/darknet/src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_delta_gpu	monodepth/darknet/src/layer.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	monodepth/darknet/src/layer.h	/^    float * save_gpu;$/;"	m	struct:layer
save_image	monodepth/darknet/src/image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	monodepth/darknet/src/image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	monodepth/darknet/src/image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_reconstruction	monodepth/darknet/src/rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_weights	monodepth/darknet/src/parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	monodepth/darknet/src/parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	monodepth/darknet/src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	monodepth/darknet/src/data.h	/^    int scale;$/;"	m	struct:load_args
scale	monodepth/darknet/src/layer.h	/^    float scale;$/;"	m	struct:layer
scale	monodepth/darknet/src/network.h	/^    float scale;$/;"	m	struct:network
scale_array	monodepth/darknet/src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	monodepth/darknet/src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	monodepth/darknet/src/data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	monodepth/darknet/src/image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	monodepth/darknet/src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	monodepth/darknet/src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_pyramid	monodepth/monodepth_model.py	/^    def scale_pyramid(self, img, num_scales):$/;"	m	class:MonodepthModel
scale_updates	monodepth/darknet/src/layer.h	/^    float *scale_updates;$/;"	m	struct:layer
scale_updates_gpu	monodepth/darknet/src/layer.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scales	monodepth/darknet/src/layer.h	/^    float *scales;$/;"	m	struct:layer
scales	monodepth/darknet/src/network.h	/^    float *scales;$/;"	m	struct:network
scales_gpu	monodepth/darknet/src/layer.h	/^    float * scales_gpu;$/;"	m	struct:layer
scan_n	monodepth/darknet/src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon14
sched_param	monodepth/darknet/3rdparty/include/sched.h	/^struct sched_param {$/;"	s
sched_priority	monodepth/darknet/3rdparty/include/sched.h	/^  int sched_priority;$/;"	m	struct:sched_param
sched_rr_get_interval	monodepth/darknet/3rdparty/include/sched.h	171;"	d
score_game	monodepth/darknet/src/go.c	/^float score_game(float *board)$/;"	f
sec	monodepth/darknet/src/utils.c	/^float sec(clock_t clocks)$/;"	f
section	monodepth/darknet/src/parser.c	/^}section;$/;"	t	typeref:struct:__anon26	file:
seen	monodepth/darknet/src/network.h	/^	int *seen;$/;"	m	struct:network
self_go	monodepth/darknet/src/go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
self_layer	monodepth/darknet/src/layer.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
sem_t	monodepth/darknet/3rdparty/include/semaphore.h	/^typedef struct sem_t_ * sem_t;$/;"	t	typeref:struct:sem_t_
send_mjpeg	monodepth/darknet/src/http_stream.cpp	/^void send_mjpeg(IplImage* ipl, int port, int timeout, int quality) {$/;"	f
set	monodepth/darknet/src/yolo_console_dll.cpp	/^	void set(std::vector<bbox_t> result_vec) {$/;"	f	class:track_kalman
set	monodepth/darknet/src/yolo_v2_class.hpp	/^	void set(cv::Mat src_mat, std::vector<bbox_t> result_vec)$/;"	f	class:preview_boxes_t
set_batch_network	monodepth/darknet/src/network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_gpu	monodepth/darknet/darknet.py	/^    set_gpu = lib.cuda_set_device$/;"	v
set_pixel	monodepth/darknet/src/image.c	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
sets	monodepth/darknet/scripts/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
sets	monodepth/darknet/scripts/voc_label_difficult.py	/^sets=[('2012', 'val'),('2007', 'test')]$/;"	v
shallow	monodepth/darknet/src/data.h	/^    int shallow;$/;"	m	struct:__anon41
shift	monodepth/darknet/src/layer.h	/^    float shift;$/;"	m	struct:layer
shortcut	monodepth/darknet/src/layer.h	/^    int shortcut;$/;"	m	struct:layer
shortcut_cpu	monodepth/darknet/src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
show_console_result	monodepth/darknet/src/yolo_console_dll.cpp	/^void show_console_result(std::vector<bbox_t> const result_vec, std::vector<std::string> const obj_names) {$/;"	f
show_image	monodepth/darknet/src/image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	monodepth/darknet/src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	monodepth/darknet/src/image.c	/^void show_image_cv(image p, const char *name)$/;"	f
show_image_cv_ipl	monodepth/darknet/src/image.c	/^void show_image_cv_ipl(IplImage *disp, const char *name)$/;"	f
show_image_layers	monodepth/darknet/src/image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	monodepth/darknet/src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	monodepth/darknet/src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
show_img	monodepth/darknet/src/demo.c	/^IplImage* show_img;$/;"	v
show_message	monodepth/darknet/scripts/log_parser/log_parser.py	/^def show_message(message, stop=False):$/;"	f
shuffle	monodepth/darknet/src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
side	monodepth/darknet/src/layer.h	/^    int side;$/;"	m	struct:layer
simd_detect_x86	monodepth/darknet/src/gemm.c	/^int simd_detect_x86(unsigned int idFeature)$/;"	f
single_truncated	monodepth/darknet/test.py	/^single_truncated=open(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/single_truncated.txt","r")$/;"	v
single_truncated_lastline	monodepth/darknet/single_depth.py	/^single_truncated_lastline=open(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/darknet\/single_truncated_lastline.txt","r")$/;"	v
size	monodepth/darknet/src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
size	monodepth/darknet/src/layer.h	/^    int size;$/;"	m	struct:layer
size	monodepth/darknet/src/list.h	/^    int size;$/;"	m	struct:list
size	monodepth/darknet/src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon13
size	monodepth/darknet/src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon17
size	monodepth/darknet/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23
size_params	monodepth/darknet/src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	monodepth/darknet/src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
skip	monodepth/darknet/src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon8
small_object	monodepth/darknet/src/data.h	/^	int small_object;$/;"	m	struct:load_args
small_object	monodepth/darknet/src/network.h	/^	int small_object;$/;"	m	struct:network
smart_centers	monodepth/darknet/scripts/kmeansiou.c	/^void smart_centers(matrix data, matrix centers) {$/;"	f
smooth	monodepth/darknet/src/nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth_data	monodepth/darknet/src/data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	monodepth/darknet/src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
snprintf	monodepth/darknet/src/utils.h	8;"	d
sock	monodepth/darknet/src/http_stream.cpp	/^	SOCKET sock;$/;"	m	class:MJPGWriter	file:
softmax	monodepth/darknet/src/blas.c	/^void softmax(float *input, int n, float temp, float *output, int stride)$/;"	f
softmax	monodepth/darknet/src/layer.h	/^    int softmax;$/;"	m	struct:layer
softmax_cpu	monodepth/darknet/src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	monodepth/darknet/src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	monodepth/darknet/src/layer.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	monodepth/darknet/src/softmax_layer.c	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
sort_class	monodepth/darknet/src/box.h	/^	int sort_class;$/;"	m	struct:detection
sorta_shuffle	monodepth/darknet/src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	monodepth/darknet/src/box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon34	file:
sortable_bbox	monodepth/darknet/src/compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon31	file:
source_file	monodepth/darknet/single_depth.py	/^source_file = open('single_result.txt', 'r')$/;"	v
spatial_mean	monodepth/darknet/src/layer.h	/^    float * spatial_mean;$/;"	m	struct:layer
spec_end	monodepth/darknet/src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon14
spec_start	monodepth/darknet/src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon14
speed	monodepth/darknet/src/darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f
split_data	monodepth/darknet/src/data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	monodepth/darknet/src/utils.c	/^list *split_str(char *s, char delim)$/;"	f
sq_rel	monodepth/utils/evaluate_kitti.py	/^    sq_rel  = np.zeros(num_samples, np.float32)$/;"	v
sqrt	monodepth/darknet/src/layer.h	/^    int sqrt;$/;"	m	struct:layer
squared	monodepth/darknet/src/layer.h	/^    float * squared;$/;"	m	struct:layer
squared_gpu	monodepth/darknet/src/layer.h	/^    float * squared_gpu;$/;"	m	struct:layer
srandom	monodepth/darknet/src/unistd.h	15;"	d
srcTensorDesc	monodepth/darknet/src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
src_grey	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat src_grey;	\/\/ used in both functions$/;"	m	class:Tracker_optflow
src_grey_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat src_grey_gpu;	\/\/ used in both functions$/;"	m	class:Tracker_optflow
src_mat_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat src_mat_gpu;$/;"	m	class:Tracker_optflow
ssize_t	monodepth/darknet/src/unistd.h	37;"	d
stair_activate	monodepth/darknet/src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	monodepth/darknet/src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
start_x	monodepth/darknet/src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25
start_y	monodepth/darknet/src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25
state	monodepth/darknet/src/layer.h	/^    float *state;$/;"	m	struct:layer
state_delta	monodepth/darknet/src/layer.h	/^    float *state_delta;$/;"	m	struct:layer
state_delta_gpu	monodepth/darknet/src/layer.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_gate_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gpu	monodepth/darknet/src/layer.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_size	monodepth/darknet/src/yolo_console_dll.cpp	/^	int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
state_state_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	monodepth/darknet/src/layer.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
statistics_connected_layer	monodepth/darknet/src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	monodepth/darknet/src/darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
status	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Mat status, err;$/;"	m	class:Tracker_optflow
status_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
stb_image_write_test	monodepth/darknet/src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	monodepth/darknet/src/stb_image.h	3035;"	d
stbi__EOI	monodepth/darknet/src/stb_image.h	3037;"	d
stbi__SOF	monodepth/darknet/src/stb_image.h	3038;"	d
stbi__SOF_progressive	monodepth/darknet/src/stb_image.h	3041;"	d
stbi__SOI	monodepth/darknet/src/stb_image.h	3036;"	d
stbi__SOS	monodepth/darknet/src/stb_image.h	3039;"	d
stbi__YCbCr_to_RGB_row	monodepth/darknet/src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	monodepth/darknet/src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	monodepth/darknet/src/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	monodepth/darknet/src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	monodepth/darknet/src/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	monodepth/darknet/src/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	monodepth/darknet/src/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon22
stbi__bmp_info	monodepth/darknet/src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	monodepth/darknet/src/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	monodepth/darknet/src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	monodepth/darknet/src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	monodepth/darknet/src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	monodepth/darknet/src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	monodepth/darknet/src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	monodepth/darknet/src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	monodepth/darknet/src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	monodepth/darknet/src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	monodepth/darknet/src/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	monodepth/darknet/src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	monodepth/darknet/src/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	monodepth/darknet/src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon9
stbi__convert_16_to_8	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	monodepth/darknet/src/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	monodepth/darknet/src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	monodepth/darknet/src/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	monodepth/darknet/src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	monodepth/darknet/src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	monodepth/darknet/src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	monodepth/darknet/src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	monodepth/darknet/src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	monodepth/darknet/src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	monodepth/darknet/src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	monodepth/darknet/src/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	monodepth/darknet/src/stb_image.h	3162;"	d
stbi__div4	monodepth/darknet/src/stb_image.h	3113;"	d
stbi__do_png	monodepth/darknet/src/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	monodepth/darknet/src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	monodepth/darknet/src/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	monodepth/darknet/src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	monodepth/darknet/src/stb_image.h	926;"	d
stbi__err	monodepth/darknet/src/stb_image.h	928;"	d
stbi__err	monodepth/darknet/src/stb_image.h	930;"	d
stbi__errpf	monodepth/darknet/src/stb_image.h	933;"	d
stbi__errpuc	monodepth/darknet/src/stb_image.h	934;"	d
stbi__expand_png_palette	monodepth/darknet/src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	monodepth/darknet/src/stb_image.h	2114;"	d
stbi__fill_bits	monodepth/darknet/src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	monodepth/darknet/src/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f
stbi__float2fixed	monodepth/darknet/src/stb_image.h	3318;"	d
stbi__float2int	monodepth/darknet/src/stb_image.h	1586;"	d
stbi__float_postprocess	monodepth/darknet/src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	monodepth/darknet/src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	monodepth/darknet/src/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	monodepth/darknet/src/stb_image.h	2115;"	d
stbi__g_failure_reason	monodepth/darknet/src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	monodepth/darknet/src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	monodepth/darknet/src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	monodepth/darknet/src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	monodepth/darknet/src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	monodepth/darknet/src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	monodepth/darknet/src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	monodepth/darknet/src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	monodepth/darknet/src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	monodepth/darknet/src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon25
stbi__gif_header	monodepth/darknet/src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	monodepth/darknet/src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	monodepth/darknet/src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon24
stbi__gif_parse_colortable	monodepth/darknet/src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	monodepth/darknet/src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	monodepth/darknet/src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	monodepth/darknet/src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	monodepth/darknet/src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	monodepth/darknet/src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	monodepth/darknet/src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	monodepth/darknet/src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	monodepth/darknet/src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	monodepth/darknet/src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	monodepth/darknet/src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	monodepth/darknet/src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	monodepth/darknet/src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon13
stbi__idct_block	monodepth/darknet/src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	monodepth/darknet/src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	monodepth/darknet/src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	monodepth/darknet/src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	monodepth/darknet/src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	monodepth/darknet/src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	monodepth/darknet/src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	monodepth/darknet/src/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	monodepth/darknet/src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon14
stbi__jpeg_decode_block	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	monodepth/darknet/src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	monodepth/darknet/src/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	monodepth/darknet/src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	monodepth/darknet/src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	monodepth/darknet/src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	monodepth/darknet/src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	monodepth/darknet/src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	monodepth/darknet/src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	monodepth/darknet/src/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	monodepth/darknet/src/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	monodepth/darknet/src/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	monodepth/darknet/src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	monodepth/darknet/src/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	monodepth/darknet/src/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	monodepth/darknet/src/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	monodepth/darknet/src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	monodepth/darknet/src/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	monodepth/darknet/src/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	monodepth/darknet/src/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	monodepth/darknet/src/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	monodepth/darknet/src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	monodepth/darknet/src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	monodepth/darknet/src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	monodepth/darknet/src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	monodepth/darknet/src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	monodepth/darknet/src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon23
stbi__pic_test	monodepth/darknet/src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	monodepth/darknet/src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	monodepth/darknet/src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon20
stbi__png_info	monodepth/darknet/src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	monodepth/darknet/src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	monodepth/darknet/src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	monodepth/darknet/src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon19
stbi__pnm_getinteger	monodepth/darknet/src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	monodepth/darknet/src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	monodepth/darknet/src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	monodepth/darknet/src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	monodepth/darknet/src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	monodepth/darknet/src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	monodepth/darknet/src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	monodepth/darknet/src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	monodepth/darknet/src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	monodepth/darknet/src/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	monodepth/darknet/src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	monodepth/darknet/src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	monodepth/darknet/src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	monodepth/darknet/src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon16
stbi__resample_row_generic	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	monodepth/darknet/src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	monodepth/darknet/src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	monodepth/darknet/src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	monodepth/darknet/src/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon11
stbi__rewind	monodepth/darknet/src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	monodepth/darknet/src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	monodepth/darknet/src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	monodepth/darknet/src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	monodepth/darknet/src/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	monodepth/darknet/src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	monodepth/darknet/src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	monodepth/darknet/src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	monodepth/darknet/src/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	monodepth/darknet/src/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	monodepth/darknet/src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	monodepth/darknet/src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	monodepth/darknet/src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	monodepth/darknet/src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	monodepth/darknet/src/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	monodepth/darknet/src/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	monodepth/darknet/src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	monodepth/darknet/src/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	monodepth/darknet/src/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	monodepth/darknet/src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	monodepth/darknet/src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	monodepth/darknet/src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	monodepth/darknet/src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	monodepth/darknet/src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	monodepth/darknet/src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	monodepth/darknet/src/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	monodepth/darknet/src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	monodepth/darknet/src/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon29
stbi__zbuf	monodepth/darknet/src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon18
stbi__zbuild_huffman	monodepth/darknet/src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	monodepth/darknet/src/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	monodepth/darknet/src/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	monodepth/darknet/src/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	monodepth/darknet/src/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	monodepth/darknet/src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	monodepth/darknet/src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	monodepth/darknet/src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon17
stbi__zhuffman_decode	monodepth/darknet/src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	monodepth/darknet/src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	monodepth/darknet/src/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	monodepth/darknet/src/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	monodepth/darknet/src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	monodepth/darknet/src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	monodepth/darknet/src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	monodepth/darknet/src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	monodepth/darknet/src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	monodepth/darknet/src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	monodepth/darknet/src/stb_image.h	522;"	d
stbi_inline	monodepth/darknet/src/stb_image.h	524;"	d
stbi_inline	monodepth/darknet/src/stb_image.h	527;"	d
stbi_io_callbacks	monodepth/darknet/src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon8
stbi_is_hdr	monodepth/darknet/src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	monodepth/darknet/src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	monodepth/darknet/src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	monodepth/darknet/src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	monodepth/darknet/src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	monodepth/darknet/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	monodepth/darknet/src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	monodepth/darknet/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	monodepth/darknet/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	monodepth/darknet/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	monodepth/darknet/src/stb_image.h	558;"	d
stbi_lrot	monodepth/darknet/src/stb_image.h	560;"	d
stbi_set_flip_vertically_on_load	monodepth/darknet/src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	monodepth/darknet/src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	monodepth/darknet/src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	monodepth/darknet/src/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	monodepth/darknet/src/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_func	monodepth/darknet/src/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	monodepth/darknet/src/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	monodepth/darknet/src/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_func	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	monodepth/darknet/src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	monodepth/darknet/src/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	monodepth/darknet/src/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	monodepth/darknet/src/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	monodepth/darknet/src/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	monodepth/darknet/src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	monodepth/darknet/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	monodepth/darknet/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	monodepth/darknet/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	monodepth/darknet/src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	monodepth/darknet/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	monodepth/darknet/src/stb_image_write.h	743;"	d
stbiw__crc32	monodepth/darknet/src/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__jpg_DCT	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	monodepth/darknet/src/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	monodepth/darknet/src/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	monodepth/darknet/src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	monodepth/darknet/src/stb_image_write.h	493;"	d
stbiw__outfile	monodepth/darknet/src/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	monodepth/darknet/src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	monodepth/darknet/src/stb_image_write.h	675;"	d
stbiw__sbfree	monodepth/darknet/src/stb_image_write.h	676;"	d
stbiw__sbgrow	monodepth/darknet/src/stb_image_write.h	672;"	d
stbiw__sbgrowf	monodepth/darknet/src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	monodepth/darknet/src/stb_image_write.h	667;"	d
stbiw__sbmaybegrow	monodepth/darknet/src/stb_image_write.h	671;"	d
stbiw__sbn	monodepth/darknet/src/stb_image_write.h	668;"	d
stbiw__sbneedgrow	monodepth/darknet/src/stb_image_write.h	670;"	d
stbiw__sbpush	monodepth/darknet/src/stb_image_write.h	674;"	d
stbiw__sbraw	monodepth/darknet/src/stb_image_write.h	666;"	d
stbiw__wp32	monodepth/darknet/src/stb_image_write.h	896;"	d
stbiw__wpcrc	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	monodepth/darknet/src/stb_image_write.h	895;"	d
stbiw__wptag	monodepth/darknet/src/stb_image_write.h	897;"	d
stbiw__write3	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	monodepth/darknet/src/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	monodepth/darknet/src/stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	monodepth/darknet/src/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	monodepth/darknet/src/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	monodepth/darknet/src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	monodepth/darknet/src/stb_image_write.h	732;"	d
stbiw__zlib_bitrev	monodepth/darknet/src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	monodepth/darknet/src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	monodepth/darknet/src/stb_image_write.h	731;"	d
stbiw__zlib_flushf	monodepth/darknet/src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	monodepth/darknet/src/stb_image_write.h	740;"	d
stbiw__zlib_huff1	monodepth/darknet/src/stb_image_write.h	736;"	d
stbiw__zlib_huff2	monodepth/darknet/src/stb_image_write.h	737;"	d
stbiw__zlib_huff3	monodepth/darknet/src/stb_image_write.h	738;"	d
stbiw__zlib_huff4	monodepth/darknet/src/stb_image_write.h	739;"	d
stbiw__zlib_huffa	monodepth/darknet/src/stb_image_write.h	734;"	d
stbiw__zlib_huffb	monodepth/darknet/src/stb_image_write.h	741;"	d
stbiw_uint32	monodepth/darknet/src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	monodepth/darknet/src/network.h	/^    int step;$/;"	m	struct:network
step	monodepth/darknet/src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25
steps	monodepth/darknet/src/layer.h	/^    int steps;$/;"	m	struct:layer
steps	monodepth/darknet/src/network.h	/^    int   *steps;$/;"	m	struct:network
stopbackward	monodepth/darknet/src/layer.h	/^    int stopbackward;$/;"	m	struct:layer
str1	monodepth/darknet/depth.py	/^    str1=''.join(x)$/;"	v
stream	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::cuda::Stream stream;$/;"	m	class:Tracker_optflow
streamInit	monodepth/darknet/src/cuda.c	/^static int streamInit[16] = { 0 };$/;"	v	file:
streamsArray	monodepth/darknet/src/cuda.c	/^static cudaStream_t streamsArray[16];	\/\/ cudaStreamSynchronize( get_cuda_stream() );$/;"	v	file:
stride	monodepth/darknet/src/layer.h	/^    int stride;$/;"	m	struct:layer
string_length_tf	monodepth/monodepth_dataloader.py	/^def string_length_tf(t):$/;"	f
string_to_board	monodepth/darknet/src/go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	monodepth/darknet/src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	monodepth/darknet/src/utils.c	/^void strip(char *s)$/;"	f
strip_args	monodepth/darknet/src/utils.c	/^void strip_args(char *s)$/;"	f
strip_char	monodepth/darknet/src/utils.c	/^void strip_char(char *s, char bad)$/;"	f
sub2ind	monodepth/utils/evaluation_utils.py	/^def sub2ind(matrixSize, rowSub, colSub):$/;"	f
subdivisions	monodepth/darknet/src/network.h	/^    int subdivisions;$/;"	m	struct:network
succ_high	monodepth/darknet/src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon14
succ_low	monodepth/darknet/src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon14
suffix	monodepth/darknet/src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon24
suicide_go	monodepth/darknet/src/go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	monodepth/darknet/src/utils.c	/^float sum_array(float *a, int n)$/;"	f
swap_binary	monodepth/darknet/src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
sync_PyrLKOpticalFlow	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Ptr<cv::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow;$/;"	m	class:Tracker_optflow
sync_PyrLKOpticalFlow_gpu	monodepth/darknet/src/yolo_v2_class.hpp	/^	cv::Ptr<cv::cuda::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow_gpu;$/;"	m	class:Tracker_optflow
t	monodepth/darknet/depth.py	/^t=[]$/;"	v
t	monodepth/darknet/single_depth.py	/^t=[]$/;"	v
t	monodepth/darknet/src/layer.h	/^	int t;$/;"	m	struct:__anon38
t	monodepth/darknet/src/layer.h	/^    int t;$/;"	m	struct:layer
t	monodepth/darknet/test.py	/^t=[]$/;"	v
tanh	monodepth/darknet/src/layer.h	/^	int tanh;$/;"	m	struct:layer
tanh_activate	monodepth/darknet/src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_gradient	monodepth/darknet/src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
target_file	monodepth/darknet/single_depth.py	/^target_file = open('single_truncated.txt', 'w')$/;"	v
temperature	monodepth/darknet/src/layer.h	/^    float temperature;$/;"	m	struct:layer
test	monodepth/monodepth_main.py	/^def test(params):$/;"	f
test_box	monodepth/darknet/src/box.c	/^void test_box()$/;"	f
test_captcha	monodepth/darknet/src/captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	monodepth/darknet/src/rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	monodepth/darknet/src/cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	monodepth/darknet/src/cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	monodepth/darknet/src/cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	monodepth/darknet/src/cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	monodepth/darknet/src/classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	monodepth/darknet/src/coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void test_convolutional_layer()$/;"	f
test_detector	monodepth/darknet/src/detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh,$/;"	f
test_dice	monodepth/darknet/src/dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	monodepth/darknet/src/box.c	/^void test_dintersect()$/;"	f
test_dunion	monodepth/darknet/src/box.c	/^void test_dunion()$/;"	f
test_files	monodepth/utils/evaluate_kitti.py	/^        test_files = read_text_lines(args.gt_path + 'eigen_test_files.txt')$/;"	v
test_go	monodepth/darknet/src/go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	monodepth/darknet/src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	monodepth/darknet/src/gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	monodepth/darknet/src/image.c	/^void test_resize(char *filename)$/;"	f
test_simple	monodepth/monodepth_simple.py	/^def test_simple(params):$/;"	f
test_super	monodepth/darknet/src/super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	monodepth/darknet/src/rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	monodepth/darknet/src/tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	monodepth/darknet/src/voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	monodepth/darknet/src/writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	monodepth/darknet/src/yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
threads	monodepth/darknet/src/data.h	/^    int threads;$/;"	m	struct:load_args
threat_classifier	monodepth/darknet/src/classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	monodepth/darknet/src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	monodepth/darknet/src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	monodepth/darknet/src/layer.h	/^    float thresh;$/;"	m	struct:layer
threshold_image	monodepth/darknet/src/image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	monodepth/darknet/src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu_random_matrix	monodepth/darknet/src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_ongpu	monodepth/darknet/src/gemm.c	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	monodepth/darknet/src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	monodepth/darknet/src/network.h	/^    int time_steps;$/;"	m	struct:network
time_steps	monodepth/darknet/src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
time_vec	monodepth/darknet/src/yolo_console_dll.cpp	/^	std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
timeout	monodepth/darknet/src/http_stream.cpp	/^	int timeout; \/\/ master sock timeout, shutdown after timeout millis.$/;"	m	class:MJPGWriter	file:
timersub	monodepth/darknet/src/gettimeofday.c	/^int timersub(struct timeval *a, struct timeval *b, struct timeval *result)$/;"	f
timespec	monodepth/darknet/3rdparty/include/pthread.h	/^struct timespec {$/;"	s
timezone	monodepth/darknet/src/gettimeofday.h	/^struct timezone $/;"	s
tisnan	monodepth/darknet/src/region_layer.c	/^float tisnan(float x)$/;"	f
tmp	monodepth/darknet/darknet.py	/^            tmp = os.environ["FORCE_CPU"].lower()$/;"	v
todo	monodepth/darknet/src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon14
top	monodepth/darknet/src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon43
top_k	monodepth/darknet/src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	monodepth/darknet/src/network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
total	monodepth/darknet/src/layer.h	/^	int total;$/;"	m	struct:layer
total_compares	monodepth/darknet/src/compare.c	/^int total_compares = 0;$/;"	v
tq	monodepth/darknet/src/stb_image.h	/^      int tq;$/;"	m	struct:__anon14::__anon15
track_id	monodepth/darknet/src/yolo_v2_class.cpp	/^	unsigned int *track_id;$/;"	m	struct:detector_gpu_t	file:
track_id	monodepth/darknet/src/yolo_v2_class.hpp	/^		unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
track_id	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int track_id;		\/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	m	struct:bbox_t
track_kalman	monodepth/darknet/src/yolo_console_dll.cpp	/^	track_kalman(int _state_size = 10, int _meas_size = 10, int _contr_size = 0)$/;"	f	class:track_kalman
track_kalman	monodepth/darknet/src/yolo_console_dll.cpp	/^class track_kalman {$/;"	c	file:
tracking_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bbox_t> tracking_flow(cv::Mat dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	std::vector<bbox_t> tracking_flow(cv::Mat new_dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_id	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t> cur_bbox_vec, bool const change_history, $/;"	f	class:Detector
train	monodepth/darknet/src/network.h	/^    int train;$/;"	m	struct:network_state
train	monodepth/monodepth_main.py	/^def train(params):$/;"	f
train_captcha	monodepth/darknet/src/captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	monodepth/darknet/src/rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	monodepth/darknet/src/cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	monodepth/darknet/src/cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	monodepth/darknet/src/classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show)$/;"	f
train_coco	monodepth/darknet/src/coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	monodepth/darknet/src/compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	monodepth/darknet/src/detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show)$/;"	f
train_dice	monodepth/darknet/src/dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	monodepth/darknet/src/go.c	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_network	monodepth/darknet/src/network.c	/^float train_network(network net, data d)$/;"	f
train_network_batch	monodepth/darknet/src/network.c	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	monodepth/darknet/src/network.c	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_sgd	monodepth/darknet/src/network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_super	monodepth/darknet/src/super.c	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	monodepth/darknet/src/swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	monodepth/darknet/src/tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_vid_rnn	monodepth/darknet/src/rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voxel	monodepth/darknet/src/voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	monodepth/darknet/src/writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	monodepth/darknet/src/yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
translate_array	monodepth/darknet/src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	monodepth/darknet/src/data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	monodepth/darknet/src/image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	monodepth/darknet/src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	monodepth/darknet/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon25
transpose_image	monodepth/darknet/src/image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	monodepth/darknet/src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
tree	monodepth/darknet/src/tree.h	/^} tree;$/;"	t	typeref:struct:__anon27
truth	monodepth/darknet/src/network.h	/^    float *truth;$/;"	m	struct:network_state
truth_flag	monodepth/darknet/src/detector.c	/^	int truth_flag;$/;"	m	struct:__anon47	file:
truth_gpu	monodepth/darknet/src/network.h	/^    float **truth_gpu;$/;"	m	struct:network
truth_thresh	monodepth/darknet/src/layer.h	/^	float truth_thresh;$/;"	m	struct:layer
truths	monodepth/darknet/src/layer.h	/^    int truths;$/;"	m	struct:layer
try_classifier	monodepth/darknet/src/classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
tv_nsec	monodepth/darknet/3rdparty/include/pthread.h	/^        long tv_nsec;$/;"	m	struct:timespec
tv_sec	monodepth/darknet/3rdparty/include/pthread.h	/^        time_t tv_sec;$/;"	m	struct:timespec
type	monodepth/darknet/src/data.h	/^    data_type type;$/;"	m	struct:load_args
type	monodepth/darknet/src/layer.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	monodepth/darknet/src/parser.c	/^    char *type;$/;"	m	struct:__anon26	file:
type	monodepth/darknet/src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon19
type	monodepth/darknet/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23
tz_dsttime	monodepth/darknet/src/gettimeofday.h	/^  int  tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:timezone
tz_minuteswest	monodepth/darknet/src/gettimeofday.h	/^  int  tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:timezone
unique_truth_index	monodepth/darknet/src/detector.c	/^	int unique_truth_index;$/;"	m	struct:__anon47	file:
unlink	monodepth/darknet/src/unistd.h	29;"	d
unload	sshgui.py	/^    def unload(self):$/;"	m	class:ImageLabel
upconv	monodepth/monodepth_model.py	/^    def upconv(self, x, num_out_layers, kernel_size, scale):$/;"	m	class:MonodepthModel
update	monodepth/darknet/src/layer.h	/^    void (*update)    (struct layer, int, float, float, float);$/;"	m	struct:layer
update_args	monodepth/darknet/src/layer.h	/^} update_args;$/;"	t	typeref:struct:__anon38
update_connected_layer	monodepth/darknet/src/connected_layer.c	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	monodepth/darknet/src/connected_layer.c	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer	monodepth/darknet/src/crnn_layer.c	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	monodepth/darknet/src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_cur_bbox_vec	monodepth/darknet/src/yolo_v2_class.hpp	/^	void update_cur_bbox_vec(std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_deconvolutional_layer	monodepth/darknet/src/deconvolutional_layer.c	/^void update_deconvolutional_layer(deconvolutional_layer l, float learning_rate, float momentum, float decay)$/;"	f
update_gpu	monodepth/darknet/src/layer.h	/^    void (*update_gpu)    (struct layer, int, float, float, float);$/;"	m	struct:layer
update_gru_layer	monodepth/darknet/src/gru_layer.c	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	monodepth/darknet/src/gru_layer.c	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer	monodepth/darknet/src/local_layer.c	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	monodepth/darknet/src/local_layer.c	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_network	monodepth/darknet/src/network.c	/^void update_network(network net)$/;"	f
update_result	monodepth/darknet/src/yolo_console_dll.cpp	/^	void update_result(std::vector<bbox_t> new_result_vec, float new_time, bool update = true) {$/;"	f	class:extrapolate_coords_t
update_rnn_layer	monodepth/darknet/src/rnn_layer.c	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	monodepth/darknet/src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_tracking_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	void update_tracking_flow(cv::Mat new_src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_tracking_flow	monodepth/darknet/src/yolo_v2_class.hpp	/^	void update_tracking_flow(cv::Mat src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
upsample_cpu	monodepth/darknet/src/blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
upsample_nn	monodepth/monodepth_model.py	/^    def upsample_nn(self, x, ratio):$/;"	m	class:MonodepthModel
used	monodepth/darknet/src/option_list.h	/^    int used;$/;"	m	struct:__anon49
v	monodepth/darknet/src/layer.h	/^    float *v;$/;"	m	struct:layer
v	monodepth/darknet/src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon14::__anon15
v_gpu	monodepth/darknet/src/layer.h	/^    float *v_gpu;$/;"	m	struct:layer
val	monodepth/darknet/src/getopt.h	/^  int val;$/;"	m	struct:option
val	monodepth/darknet/src/list.h	/^    void *val;$/;"	m	struct:node
val	monodepth/darknet/src/option_list.h	/^    char *val;$/;"	m	struct:__anon49
valid_captcha	monodepth/darknet/src/captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	monodepth/darknet/src/rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	monodepth/darknet/src/go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	monodepth/darknet/src/rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	monodepth/darknet/src/classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	monodepth/darknet/src/classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	monodepth/darknet/src/classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	monodepth/darknet/src/classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	monodepth/darknet/src/classifier.c	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_coco	monodepth/darknet/src/coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	monodepth/darknet/src/coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	monodepth/darknet/src/compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	monodepth/darknet/src/detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_map	monodepth/darknet/src/detector.c	/^void validate_detector_map(char *datacfg, char *cfgfile, char *weightfile, float thresh_calc_avg_iou)$/;"	f
validate_detector_recall	monodepth/darknet/src/detector.c	/^void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)$/;"	f
validate_dice	monodepth/darknet/src/dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_uint32	monodepth/darknet/src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	monodepth/darknet/src/yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	monodepth/darknet/src/yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
vals	monodepth/darknet/scripts/kmeansiou.c	/^    double **vals;$/;"	m	struct:matrix	file:
vals	monodepth/darknet/src/matrix.h	/^    float **vals;$/;"	m	struct:matrix
value	monodepth/darknet/src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon17
values	monodepth/darknet/src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon13
variance	monodepth/darknet/src/layer.h	/^    float * variance;$/;"	m	struct:layer
variance_array	monodepth/darknet/src/utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	monodepth/darknet/src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	monodepth/darknet/src/layer.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta_cpu	monodepth/darknet/src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	monodepth/darknet/src/layer.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_gpu	monodepth/darknet/src/layer.h	/^    float * variance_gpu;$/;"	m	struct:layer
vec_char_rnn	monodepth/darknet/src/rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
visualize	monodepth/darknet/src/darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	monodepth/darknet/src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	monodepth/darknet/src/network.c	/^void visualize_network(network net)$/;"	f
voc_ap	monodepth/darknet/scripts/voc_eval.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_ap	monodepth/darknet/scripts/voc_eval_py3.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_eval	monodepth/darknet/scripts/voc_eval.py	/^def voc_eval(detpath,$/;"	f
voc_eval	monodepth/darknet/scripts/voc_eval_py3.py	/^def voc_eval(detpath,$/;"	f
voc_names	monodepth/darknet/src/yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
vs	monodepth/darknet/src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon16
w	monodepth/darknet/depth.py	/^w=np.load(r"\/home\/ubuntu\/CollisionWarningSystem\/monodepth\/Output\/disparities_pp.npy")$/;"	v
w	monodepth/darknet/src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon39
w	monodepth/darknet/src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon43
w	monodepth/darknet/src/data.h	/^    int w, h;$/;"	m	struct:__anon41
w	monodepth/darknet/src/data.h	/^    int w;$/;"	m	struct:load_args
w	monodepth/darknet/src/detector.c	/^	float w, h;$/;"	m	struct:__anon48	file:
w	monodepth/darknet/src/http_stream.cpp	/^	WSADATA w;$/;"	m	struct:_INIT_W32DATA	file:
w	monodepth/darknet/src/image.h	/^	int w;$/;"	m	struct:__anon32
w	monodepth/darknet/src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
w	monodepth/darknet/src/network.h	/^    int h, w, c;$/;"	m	struct:network
w	monodepth/darknet/src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
w	monodepth/darknet/src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25
w	monodepth/darknet/src/yolo_v2_class.hpp	/^	int w;						\/\/ width$/;"	m	struct:image_t
w	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int x, y, w, h;	\/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
w2	monodepth/darknet/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon14::__anon15
w_lores	monodepth/darknet/src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon16
wait_for_stream	monodepth/darknet/src/image.c	/^int wait_for_stream(CvCapture *cap, IplImage* src, int dont_close) {$/;"	f
wait_stream	monodepth/darknet/src/network.h	/^	int wait_stream;$/;"	m	struct:network
wait_stream	monodepth/darknet/src/yolo_v2_class.hpp	/^	bool wait_stream;$/;"	m	class:Detector
wd	monodepth/darknet/scripts/voc_label.py	/^wd = getcwd()$/;"	v
wd	monodepth/darknet/scripts/voc_label_difficult.py	/^wd = getcwd()$/;"	v
weightDesc	monodepth/darknet/src/layer.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer
weight_updates	monodepth/darknet/src/layer.h	/^    float *weight_updates;$/;"	m	struct:layer
weight_updates_gpu	monodepth/darknet/src/layer.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weight_updates_gpu16	monodepth/darknet/src/layer.h	/^	float * weight_updates_gpu16;$/;"	m	struct:layer
weighted_delta_cpu	monodepth/darknet/src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	monodepth/darknet/src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	monodepth/darknet/src/layer.h	/^    float *weights;$/;"	m	struct:layer
weights_gpu	monodepth/darknet/src/layer.h	/^    float * weights_gpu;$/;"	m	struct:layer
weights_gpu16	monodepth/darknet/src/layer.h	/^	float * weights_gpu16;$/;"	m	struct:layer
what_time_is_it_now	monodepth/darknet/src/utils.c	/^double what_time_is_it_now()$/;"	f
width_in_cfg_file	monodepth/darknet/scripts/gen_anchors.py	/^width_in_cfg_file = 416.$/;"	v
width_to_focal	monodepth/utils/evaluation_utils.py	/^width_to_focal = dict()$/;"	v
winGPUdll	monodepth/darknet/darknet.py	/^    winGPUdll = os.path.join(cwd, "yolo_cpp_dll.dll")$/;"	v
winNoGPUdll	monodepth/darknet/darknet.py	/^    winNoGPUdll = os.path.join(cwd, "yolo_cpp_dll_nogpu.dll")$/;"	v
windows	monodepth/darknet/src/image.c	/^int windows = 0;$/;"	v
workspace	monodepth/darknet/src/network.h	/^    float *workspace;$/;"	m	struct:network
workspace	monodepth/darknet/src/network.h	/^    float *workspace;$/;"	m	struct:network_state
workspace_size	monodepth/darknet/src/layer.h	/^    size_t workspace_size;$/;"	m	struct:layer
write	monodepth/darknet/src/http_stream.cpp	/^	bool write(const Mat & frame)$/;"	f	class:MJPGWriter
write_all	monodepth/darknet/src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	monodepth/darknet/src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_anchors_to_file	monodepth/darknet/scripts/gen_anchors.py	/^def write_anchors_to_file(centroids,X,anchor_file):$/;"	f
write_int	monodepth/darknet/src/utils.c	/^void write_int(int fd, int n)$/;"	f
x	monodepth/darknet/3rdparty/include/pthread.h	/^    unsigned int x;             \/* Extra information - reuse count etc *\/$/;"	m	struct:__anon2
x	monodepth/darknet/depth.py	/^x=[]$/;"	v
x	monodepth/darknet/single_depth.py	/^x=[]$/;"	v
x	monodepth/darknet/src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon39
x	monodepth/darknet/src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon43
x	monodepth/darknet/src/layer.h	/^    float * x;$/;"	m	struct:layer
x	monodepth/darknet/src/rnn.c	/^    float *x;$/;"	m	struct:__anon35	file:
x	monodepth/darknet/src/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon33	file:
x	monodepth/darknet/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon14::__anon15
x	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int x, y, w, h;	\/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
x	monodepth/darknet/test.py	/^x=[]$/;"	v
x	monodepth/darknet/writeToFile2.py	/^x = 1$/;"	v
x	monodepth/writeToFile.py	/^x = 1$/;"	v
x_gpu	monodepth/darknet/src/layer.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	monodepth/darknet/src/layer.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm_gpu	monodepth/darknet/src/layer.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
xnor	monodepth/darknet/src/layer.h	/^    int xnor;$/;"	m	struct:layer
y	monodepth/darknet/src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon39
y	monodepth/darknet/src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon43
y	monodepth/darknet/src/data.h	/^    matrix y;$/;"	m	struct:__anon41
y	monodepth/darknet/src/rnn.c	/^    float *y;$/;"	m	struct:__anon35	file:
y	monodepth/darknet/src/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon33	file:
y	monodepth/darknet/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon14::__anon15
y	monodepth/darknet/src/yolo_v2_class.hpp	/^	unsigned int x, y, w, h;	\/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
yolo_num_detections	monodepth/darknet/src/yolo_layer.c	/^int yolo_num_detections(layer l, float thresh)$/;"	f
ypos	monodepth/darknet/src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon16
ystep	monodepth/darknet/src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon16
yy	monodepth/darknet/depth.py	/^yy=[]$/;"	v
yy	monodepth/darknet/single_depth.py	/^yy=[]$/;"	v
yy	monodepth/darknet/test.py	/^yy=[]$/;"	v
z	monodepth/darknet/depth.py	/^        z=line.split("\\t")$/;"	v
z	monodepth/darknet/single_depth.py	/^    z=line.split("\\t")$/;"	v
z	monodepth/darknet/test.py	/^    z=line.split("\\t")$/;"	v
z_cpu	monodepth/darknet/src/layer.h	/^    float *z_cpu;$/;"	m	struct:layer
z_distance	monodepth/darknet/src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon18
z_expandable	monodepth/darknet/src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon18
z_gpu	monodepth/darknet/src/layer.h	/^    float *z_gpu;$/;"	m	struct:layer
z_length	monodepth/darknet/src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon18
zbuffer	monodepth/darknet/src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon18
zbuffer_end	monodepth/darknet/src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon18
zero_matrix	monodepth/darknet/scripts/kmeansiou.c	/^void zero_matrix(matrix m)$/;"	f
zout	monodepth/darknet/src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon18
zout_end	monodepth/darknet/src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon18
zout_start	monodepth/darknet/src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon18
~Detector	monodepth/darknet/src/yolo_v2_class.cpp	/^YOLODLL_API Detector::~Detector() $/;"	f	class:Detector
~MJPGWriter	monodepth/darknet/src/http_stream.cpp	/^	~MJPGWriter()$/;"	f	class:MJPGWriter
~PThreadCleanup	monodepth/darknet/3rdparty/include/pthread.h	/^          ~PThreadCleanup()$/;"	f	class:PThreadCleanup
